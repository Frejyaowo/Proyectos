
control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b24  08003b24  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b2c  08003b2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000060  08003b90  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08003b90  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097d5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196a  00000000  00000000  000298a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ff  00000000  00000000  0002bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e6d  00000000  00000000  0002c477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b688  00000000  00000000  000422e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad37  00000000  00000000  0004d96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003064  00000000  00000000  000d86a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000db708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a4c 	.word	0x08003a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003a4c 	.word	0x08003a4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4603      	mov	r3, r0
 800058c:	70fb      	strb	r3, [r7, #3]
 800058e:	460b      	mov	r3, r1
 8000590:	70bb      	strb	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 800059e:	78bb      	ldrb	r3, [r7, #2]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d908      	bls.n	80005b6 <lcd_begin+0x3a>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	78ba      	ldrb	r2, [r7, #2]
 80005ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	78fa      	ldrb	r2, [r7, #3]
 80005c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80005c6:	78fa      	ldrb	r2, [r7, #3]
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	3340      	adds	r3, #64	; 0x40
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4613      	mov	r3, r2
 80005d0:	2240      	movs	r2, #64	; 0x40
 80005d2:	2100      	movs	r1, #0
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f8c4 	bl	8000762 <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 80005da:	787b      	ldrb	r3, [r7, #1]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <lcd_begin+0x7c>
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d108      	bne.n	80005f8 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 80005f8:	2032      	movs	r0, #50	; 0x32
 80005fa:	f001 fa23 	bl	8001a44 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80005fe:	2103      	movs	r1, #3
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f948 	bl	8000896 <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 8000606:	2005      	movs	r0, #5
 8000608:	f001 fa1c 	bl	8001a44 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 800060c:	2103      	movs	r1, #3
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f941 	bl	8000896 <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 8000614:	2096      	movs	r0, #150	; 0x96
 8000616:	f000 f95b 	bl	80008d0 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 800061a:	2103      	movs	r1, #3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f93a 	bl	8000896 <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 8000622:	2102      	movs	r1, #2
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f936 	bl	8000896 <lcd_sendCmd>
	HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f001 fa0a 	bl	8001a44 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f929 	bl	8000896 <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2204      	movs	r2, #4
 8000648:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f824 	bl	800069a <lcd_display>
	lcd_clear(lcd);  // clear display
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f815 	bl	8000682 <lcd_clear>
	HAL_Delay(2);
 8000658:	2002      	movs	r0, #2
 800065a:	f001 f9f3 	bl	8001a44 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2202      	movs	r2, #2
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f90e 	bl	8000896 <lcd_sendCmd>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 800068a:	2101      	movs	r1, #1
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f902 	bl	8000896 <lcd_sendCmd>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f8e7 	bl	8000896 <lcd_sendCmd>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
 80006dc:	4613      	mov	r3, r2
 80006de:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 80006e0:	2304      	movs	r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 80006e4:	78bb      	ldrb	r3, [r7, #2]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d803      	bhi.n	80006f4 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3b01      	subs	r3, #1
 80006f2:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006fa:	78ba      	ldrb	r2, [r7, #2]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d304      	bcc.n	800070a <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000706:	3b01      	subs	r3, #1
 8000708:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 800070a:	78bb      	ldrb	r3, [r7, #2]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	4413      	add	r3, r2
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b25b      	sxtb	r3, r3
 800071c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000720:	b25b      	sxtb	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8b5 	bl	8000896 <lcd_sendCmd>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	while (*str)
 800073e:	e007      	b.n	8000750 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	603a      	str	r2, [r7, #0]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f886 	bl	800085c <lcd_sendData>
	while (*str)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f3      	bne.n	8000740 <lcd_print+0xc>
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 8000762:	b480      	push	{r7}
 8000764:	b085      	sub	sp, #20
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	78ba      	ldrb	r2, [r7, #2]
 80007be:	4619      	mov	r1, r3
 80007c0:	f001 fbfa 	bl	8001fb8 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	f001 fbed 	bl	8001fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	089b      	lsrs	r3, r3, #2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	f001 fbe0 	bl	8001fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a18      	ldr	r0, [r3, #32]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	f001 fbd3 	bl	8001fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6998      	ldr	r0, [r3, #24]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	8b99      	ldrh	r1, [r3, #28]
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	f001 fbc8 	bl	8001fb8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6918      	ldr	r0, [r3, #16]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	8a9b      	ldrh	r3, [r3, #20]
 8000830:	2201      	movs	r2, #1
 8000832:	4619      	mov	r1, r3
 8000834:	f001 fbc0 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 8000838:	2001      	movs	r0, #1
 800083a:	f000 f849 	bl	80008d0 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6918      	ldr	r0, [r3, #16]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	8a9b      	ldrh	r3, [r3, #20]
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	f001 fbb5 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f000 f83e 	bl	80008d0 <delay_us>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff95 	bl	80007a4 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	f003 030f 	and.w	r3, r3, #15
 8000880:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff8b 	bl	80007a4 <lcd_send>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ff78 	bl	80007a4 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff6e 	bl	80007a4 <lcd_send>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 80008da:	f001 ffc3 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <delay_us+0x44>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	0c9b      	lsrs	r3, r3, #18
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	fb12 f303 	smulbb	r3, r2, r3
 80008f0:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e003      	b.n	8000900 <delay_us+0x30>
		__ASM("NOP");
 80008f8:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	330e      	adds	r3, #14
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	897b      	ldrh	r3, [r7, #10]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf7      	blt.n	80008f8 <delay_us+0x28>
	}
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	431bde83 	.word	0x431bde83

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800091c:	b098      	sub	sp, #96	; 0x60
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f001 f81e 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 fb10 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 fbc6 	bl	80010b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800092c:	f000 fb76 	bl	800101c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd.RS_port = LCD_RS_GPIO_Port;
 8000930:	4a9b      	ldr	r2, [pc, #620]	; (8000ba0 <main+0x288>)
 8000932:	4b9c      	ldr	r3, [pc, #624]	; (8000ba4 <main+0x28c>)
 8000934:	6013      	str	r3, [r2, #0]
  lcd.RS_pin = LCD_RS_Pin;
 8000936:	4a9a      	ldr	r2, [pc, #616]	; (8000ba0 <main+0x288>)
 8000938:	2301      	movs	r3, #1
 800093a:	8093      	strh	r3, [r2, #4]
   //lcd.RW_port = LCD_RW_GPIO_Port;
   //lcd.RW_pin = LCD_RW_Pin;
  lcd.EN_port = LCD_EN_GPIO_Port;
 800093c:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <main+0x288>)
 800093e:	4b99      	ldr	r3, [pc, #612]	; (8000ba4 <main+0x28c>)
 8000940:	6113      	str	r3, [r2, #16]
  lcd.EN_pin = LCD_EN_Pin;
 8000942:	4a97      	ldr	r2, [pc, #604]	; (8000ba0 <main+0x288>)
 8000944:	2304      	movs	r3, #4
 8000946:	8293      	strh	r3, [r2, #20]
  lcd.D4_port = D4_GPIO_Port;
 8000948:	4a95      	ldr	r2, [pc, #596]	; (8000ba0 <main+0x288>)
 800094a:	4b97      	ldr	r3, [pc, #604]	; (8000ba8 <main+0x290>)
 800094c:	6193      	str	r3, [r2, #24]
  lcd.D4_pin = D4_Pin;
 800094e:	4a94      	ldr	r2, [pc, #592]	; (8000ba0 <main+0x288>)
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	8393      	strh	r3, [r2, #28]
  lcd.D5_port = D5_GPIO_Port;
 8000954:	4a92      	ldr	r2, [pc, #584]	; (8000ba0 <main+0x288>)
 8000956:	4b94      	ldr	r3, [pc, #592]	; (8000ba8 <main+0x290>)
 8000958:	6213      	str	r3, [r2, #32]
  lcd.D5_pin = D5_Pin;
 800095a:	4a91      	ldr	r2, [pc, #580]	; (8000ba0 <main+0x288>)
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	8493      	strh	r3, [r2, #36]	; 0x24
  lcd.D6_port = D6_GPIO_Port;
 8000960:	4a8f      	ldr	r2, [pc, #572]	; (8000ba0 <main+0x288>)
 8000962:	4b91      	ldr	r3, [pc, #580]	; (8000ba8 <main+0x290>)
 8000964:	6293      	str	r3, [r2, #40]	; 0x28
  lcd.D6_pin = D6_Pin;
 8000966:	4a8e      	ldr	r2, [pc, #568]	; (8000ba0 <main+0x288>)
 8000968:	2320      	movs	r3, #32
 800096a:	8593      	strh	r3, [r2, #44]	; 0x2c
  lcd.D7_port = D7_GPIO_Port;
 800096c:	4a8c      	ldr	r2, [pc, #560]	; (8000ba0 <main+0x288>)
 800096e:	4b8e      	ldr	r3, [pc, #568]	; (8000ba8 <main+0x290>)
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
  lcd.D7_pin = D7_Pin;
 8000972:	4a8b      	ldr	r2, [pc, #556]	; (8000ba0 <main+0x288>)
 8000974:	2302      	movs	r3, #2
 8000976:	8693      	strh	r3, [r2, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000978:	488c      	ldr	r0, [pc, #560]	; (8000bac <main+0x294>)
 800097a:	f001 ffcf 	bl	800291c <HAL_TIM_Base_Start_IT>
  while (1)
  {

	 switch(modo)
 800097e:	4b8c      	ldr	r3, [pc, #560]	; (8000bb0 <main+0x298>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d8fb      	bhi.n	800097e <main+0x66>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <main+0x74>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	0800099d 	.word	0x0800099d
 8000990:	08000b3b 	.word	0x08000b3b
 8000994:	08000d07 	.word	0x08000d07
 8000998:	08000c8b 	.word	0x08000c8b
	{
	 	 case 0://set

	 		 if((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && (posicion > 15) && (comandoP < 15))//guardar el numero del control
 800099c:	4b83      	ldr	r3, [pc, #524]	; (8000bac <main+0x294>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009a6:	d330      	bcc.n	8000a0a <main+0xf2>
 80009a8:	4b82      	ldr	r3, [pc, #520]	; (8000bb4 <main+0x29c>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d92c      	bls.n	8000a0a <main+0xf2>
 80009b0:	4b81      	ldr	r3, [pc, #516]	; (8000bb8 <main+0x2a0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2b0e      	cmp	r3, #14
 80009b6:	d828      	bhi.n	8000a0a <main+0xf2>
	 		 {
	 			modo_set();
 80009b8:	f000 fcc8 	bl	800134c <modo_set>

	 			tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 80009bc:	4b7b      	ldr	r3, [pc, #492]	; (8000bac <main+0x294>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	2200      	movs	r2, #0
 80009c4:	653b      	str	r3, [r7, #80]	; 0x50
 80009c6:	657a      	str	r2, [r7, #84]	; 0x54
 80009c8:	4b7c      	ldr	r3, [pc, #496]	; (8000bbc <main+0x2a4>)
 80009ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80009d0:	1889      	adds	r1, r1, r2
 80009d2:	6339      	str	r1, [r7, #48]	; 0x30
 80009d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80009d6:	eb41 0303 	adc.w	r3, r1, r3
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
 80009dc:	4b77      	ldr	r3, [pc, #476]	; (8000bbc <main+0x2a4>)
 80009de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80009e2:	e9c3 1200 	strd	r1, r2, [r3]
	 			__HAL_TIM_SET_COUNTER(&htim2,0);
 80009e6:	4b71      	ldr	r3, [pc, #452]	; (8000bac <main+0x294>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	6253      	str	r3, [r2, #36]	; 0x24
				estado = 0;
 80009ee:	4a74      	ldr	r2, [pc, #464]	; (8000bc0 <main+0x2a8>)
 80009f0:	2300      	movs	r3, #0
 80009f2:	8013      	strh	r3, [r2, #0]
				posicion = 0;
 80009f4:	4a6f      	ldr	r2, [pc, #444]	; (8000bb4 <main+0x29c>)
 80009f6:	2300      	movs	r3, #0
 80009f8:	8013      	strh	r3, [r2, #0]
				recividoN=0;
 80009fa:	4972      	ldr	r1, [pc, #456]	; (8000bc4 <main+0x2ac>)
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	e9c1 2300 	strd	r2, r3, [r1]
 8000a08:	e096      	b.n	8000b38 <main+0x220>
	 		 }
	 		 else if ((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && (posicion < 25))//reinicia en counter y estado y pocision
 8000a0a:	4b68      	ldr	r3, [pc, #416]	; (8000bac <main+0x294>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a14:	d34d      	bcc.n	8000ab2 <main+0x19a>
 8000a16:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <main+0x29c>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	2b18      	cmp	r3, #24
 8000a1c:	d849      	bhi.n	8000ab2 <main+0x19a>
			{
	 			lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2202      	movs	r2, #2
 8000a22:	2110      	movs	r1, #16
 8000a24:	485e      	ldr	r0, [pc, #376]	; (8000ba0 <main+0x288>)
 8000a26:	f7ff fda9 	bl	800057c <lcd_begin>
				//lcd_clear(&lcd);
				lcd_setCursor(&lcd, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	485c      	ldr	r0, [pc, #368]	; (8000ba0 <main+0x288>)
 8000a30:	f7ff fe4e 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "modo set");
 8000a34:	4964      	ldr	r1, [pc, #400]	; (8000bc8 <main+0x2b0>)
 8000a36:	485a      	ldr	r0, [pc, #360]	; (8000ba0 <main+0x288>)
 8000a38:	f7ff fe7c 	bl	8000734 <lcd_print>
				lcd_setCursor(&lcd, 0, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4857      	ldr	r0, [pc, #348]	; (8000ba0 <main+0x288>)
 8000a42:	f7ff fe45 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "Can_guardada: ");
 8000a46:	4961      	ldr	r1, [pc, #388]	; (8000bcc <main+0x2b4>)
 8000a48:	4855      	ldr	r0, [pc, #340]	; (8000ba0 <main+0x288>)
 8000a4a:	f7ff fe73 	bl	8000734 <lcd_print>
				sprintf(texto, "%u", comandoP);
 8000a4e:	4b5a      	ldr	r3, [pc, #360]	; (8000bb8 <main+0x2a0>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	495e      	ldr	r1, [pc, #376]	; (8000bd0 <main+0x2b8>)
 8000a56:	485f      	ldr	r0, [pc, #380]	; (8000bd4 <main+0x2bc>)
 8000a58:	f002 fb54 	bl	8003104 <siprintf>
				lcd_print(&lcd, texto);
 8000a5c:	495d      	ldr	r1, [pc, #372]	; (8000bd4 <main+0x2bc>)
 8000a5e:	4850      	ldr	r0, [pc, #320]	; (8000ba0 <main+0x288>)
 8000a60:	f7ff fe68 	bl	8000734 <lcd_print>
				tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <main+0x294>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000a70:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <main+0x2a4>)
 8000a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000a78:	1889      	adds	r1, r1, r2
 8000a7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8000a7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a7e:	eb41 0303 	adc.w	r3, r1, r3
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <main+0x2a4>)
 8000a86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000a8a:	e9c3 1200 	strd	r1, r2, [r3]
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000a8e:	4b47      	ldr	r3, [pc, #284]	; (8000bac <main+0x294>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	6253      	str	r3, [r2, #36]	; 0x24
				estado = 0;
 8000a96:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <main+0x2a8>)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	8013      	strh	r3, [r2, #0]
				posicion = 0;
 8000a9c:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <main+0x29c>)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	8013      	strh	r3, [r2, #0]
				recividoN=0;
 8000aa2:	4948      	ldr	r1, [pc, #288]	; (8000bc4 <main+0x2ac>)
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e9c1 2300 	strd	r2, r3, [r1]
			{
 8000ab0:	e042      	b.n	8000b38 <main+0x220>
			}
	 		 else if((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && (comandoP == 15))
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <main+0x294>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000abc:	f0c0 8237 	bcc.w	8000f2e <main+0x616>
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <main+0x2a0>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	f040 8232 	bne.w	8000f2e <main+0x616>
	 		 {
	 			lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000aca:	2300      	movs	r3, #0
 8000acc:	2202      	movs	r2, #2
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <main+0x288>)
 8000ad2:	f7ff fd53 	bl	800057c <lcd_begin>
				//lcd_clear(&lcd);
				lcd_setCursor(&lcd, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4831      	ldr	r0, [pc, #196]	; (8000ba0 <main+0x288>)
 8000adc:	f7ff fdf8 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "modo set");
 8000ae0:	4939      	ldr	r1, [pc, #228]	; (8000bc8 <main+0x2b0>)
 8000ae2:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <main+0x288>)
 8000ae4:	f7ff fe26 	bl	8000734 <lcd_print>
				lcd_setCursor(&lcd, 0, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2100      	movs	r1, #0
 8000aec:	482c      	ldr	r0, [pc, #176]	; (8000ba0 <main+0x288>)
 8000aee:	f7ff fdef 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "lleno cantdad 15");
 8000af2:	4939      	ldr	r1, [pc, #228]	; (8000bd8 <main+0x2c0>)
 8000af4:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <main+0x288>)
 8000af6:	f7ff fe1d 	bl	8000734 <lcd_print>
				tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <main+0x294>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	469a      	mov	sl, r3
 8000b04:	4693      	mov	fp, r2
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <main+0x2a4>)
 8000b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0c:	eb1a 0102 	adds.w	r1, sl, r2
 8000b10:	6239      	str	r1, [r7, #32]
 8000b12:	eb4b 0303 	adc.w	r3, fp, r3
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <main+0x2a4>)
 8000b1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000b1e:	e9c3 1200 	strd	r1, r2, [r3]
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <main+0x294>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	6253      	str	r3, [r2, #36]	; 0x24
				estado = 0;
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <main+0x2a8>)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	8013      	strh	r3, [r2, #0]
				posicion = 0;
 8000b30:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <main+0x29c>)
 8000b32:	2300      	movs	r3, #0
 8000b34:	8013      	strh	r3, [r2, #0]
	 		 }


		 break;
 8000b36:	e1fa      	b.n	8000f2e <main+0x616>
 8000b38:	e1f9      	b.n	8000f2e <main+0x616>
	 	 case 1://run
	 		if((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && (posicion > 15))
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <main+0x294>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b44:	d34a      	bcc.n	8000bdc <main+0x2c4>
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <main+0x29c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d946      	bls.n	8000bdc <main+0x2c4>
			 {
				modo_run();
 8000b4e:	f000 fb6b 	bl	8001228 <modo_run>
				tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <main+0x294>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b5c:	647a      	str	r2, [r7, #68]	; 0x44
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <main+0x2a4>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b66:	1889      	adds	r1, r1, r2
 8000b68:	61b9      	str	r1, [r7, #24]
 8000b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b6c:	eb41 0303 	adc.w	r3, r1, r3
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <main+0x2a4>)
 8000b74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000b78:	e9c3 1200 	strd	r1, r2, [r3]
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <main+0x294>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2300      	movs	r3, #0
 8000b82:	6253      	str	r3, [r2, #36]	; 0x24
				estado = 0;
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <main+0x2a8>)
 8000b86:	2300      	movs	r3, #0
 8000b88:	8013      	strh	r3, [r2, #0]
				posicion = 0;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <main+0x29c>)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	8013      	strh	r3, [r2, #0]
				recividoN=0;
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <main+0x2ac>)
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	e9c1 2300 	strd	r2, r3, [r1]
				estado = 0;
				posicion = 0;
				recividoN=0;
			}

	 	 break;
 8000b9e:	e1c8      	b.n	8000f32 <main+0x61a>
 8000ba0:	20000250 	.word	0x20000250
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	2000015a 	.word	0x2000015a
 8000bb4:	20000158 	.word	0x20000158
 8000bb8:	2000015c 	.word	0x2000015c
 8000bbc:	20000220 	.word	0x20000220
 8000bc0:	200000c4 	.word	0x200000c4
 8000bc4:	20000248 	.word	0x20000248
 8000bc8:	08003a64 	.word	0x08003a64
 8000bcc:	08003a70 	.word	0x08003a70
 8000bd0:	08003a80 	.word	0x08003a80
 8000bd4:	2000022c 	.word	0x2000022c
 8000bd8:	08003a84 	.word	0x08003a84
			 else if ((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && (posicion < 15))//reinicia en counter y estado y posicion
 8000bdc:	4ba3      	ldr	r3, [pc, #652]	; (8000e6c <main+0x554>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000be6:	f0c0 81a4 	bcc.w	8000f32 <main+0x61a>
 8000bea:	4ba1      	ldr	r3, [pc, #644]	; (8000e70 <main+0x558>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	2b0e      	cmp	r3, #14
 8000bf0:	f200 819f 	bhi.w	8000f32 <main+0x61a>
				lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	489e      	ldr	r0, [pc, #632]	; (8000e74 <main+0x55c>)
 8000bfc:	f7ff fcbe 	bl	800057c <lcd_begin>
				lcd_setCursor(&lcd, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	489b      	ldr	r0, [pc, #620]	; (8000e74 <main+0x55c>)
 8000c06:	f7ff fd63 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "modo run RX");
 8000c0a:	499b      	ldr	r1, [pc, #620]	; (8000e78 <main+0x560>)
 8000c0c:	4899      	ldr	r0, [pc, #612]	; (8000e74 <main+0x55c>)
 8000c0e:	f7ff fd91 	bl	8000734 <lcd_print>
				lcd_setCursor(&lcd, 0, 1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2100      	movs	r1, #0
 8000c16:	4897      	ldr	r0, [pc, #604]	; (8000e74 <main+0x55c>)
 8000c18:	f7ff fd5a 	bl	80006d0 <lcd_setCursor>
				lcd_print(&lcd, "comando: ");
 8000c1c:	4997      	ldr	r1, [pc, #604]	; (8000e7c <main+0x564>)
 8000c1e:	4895      	ldr	r0, [pc, #596]	; (8000e74 <main+0x55c>)
 8000c20:	f7ff fd88 	bl	8000734 <lcd_print>
				sprintf(texto, "%u", (comandoP + 1));
 8000c24:	4b96      	ldr	r3, [pc, #600]	; (8000e80 <main+0x568>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4995      	ldr	r1, [pc, #596]	; (8000e84 <main+0x56c>)
 8000c2e:	4896      	ldr	r0, [pc, #600]	; (8000e88 <main+0x570>)
 8000c30:	f002 fa68 	bl	8003104 <siprintf>
				lcd_print(&lcd, texto);
 8000c34:	4994      	ldr	r1, [pc, #592]	; (8000e88 <main+0x570>)
 8000c36:	488f      	ldr	r0, [pc, #572]	; (8000e74 <main+0x55c>)
 8000c38:	f7ff fd7c 	bl	8000734 <lcd_print>
				tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000c3c:	4b8b      	ldr	r3, [pc, #556]	; (8000e6c <main+0x554>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000c48:	4b90      	ldr	r3, [pc, #576]	; (8000e8c <main+0x574>)
 8000c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c50:	1889      	adds	r1, r1, r2
 8000c52:	6139      	str	r1, [r7, #16]
 8000c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c56:	eb41 0303 	adc.w	r3, r1, r3
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	4b8b      	ldr	r3, [pc, #556]	; (8000e8c <main+0x574>)
 8000c5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c62:	e9c3 1200 	strd	r1, r2, [r3]
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000c66:	4b81      	ldr	r3, [pc, #516]	; (8000e6c <main+0x554>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24
				estado = 0;
 8000c6e:	4a88      	ldr	r2, [pc, #544]	; (8000e90 <main+0x578>)
 8000c70:	2300      	movs	r3, #0
 8000c72:	8013      	strh	r3, [r2, #0]
				posicion = 0;
 8000c74:	4a7e      	ldr	r2, [pc, #504]	; (8000e70 <main+0x558>)
 8000c76:	2300      	movs	r3, #0
 8000c78:	8013      	strh	r3, [r2, #0]
				recividoN=0;
 8000c7a:	4986      	ldr	r1, [pc, #536]	; (8000e94 <main+0x57c>)
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
	 	 break;
 8000c88:	e153      	b.n	8000f32 <main+0x61a>
	 	 case 3:

	 		lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4878      	ldr	r0, [pc, #480]	; (8000e74 <main+0x55c>)
 8000c92:	f7ff fc73 	bl	800057c <lcd_begin>
			//lcd_clear(&lcd);
			lcd_setCursor(&lcd, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4876      	ldr	r0, [pc, #472]	; (8000e74 <main+0x55c>)
 8000c9c:	f7ff fd18 	bl	80006d0 <lcd_setCursor>
			lcd_print(&lcd, "seleccion: ");
 8000ca0:	497d      	ldr	r1, [pc, #500]	; (8000e98 <main+0x580>)
 8000ca2:	4874      	ldr	r0, [pc, #464]	; (8000e74 <main+0x55c>)
 8000ca4:	f7ff fd46 	bl	8000734 <lcd_print>
			lcd_setCursor(&lcd, 0, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2100      	movs	r1, #0
 8000cac:	4871      	ldr	r0, [pc, #452]	; (8000e74 <main+0x55c>)
 8000cae:	f7ff fd0f 	bl	80006d0 <lcd_setCursor>
			if(modo_anterior == 0){lcd_print(&lcd, "modo set");}
 8000cb2:	4b7a      	ldr	r3, [pc, #488]	; (8000e9c <main+0x584>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d104      	bne.n	8000cc4 <main+0x3ac>
 8000cba:	4979      	ldr	r1, [pc, #484]	; (8000ea0 <main+0x588>)
 8000cbc:	486d      	ldr	r0, [pc, #436]	; (8000e74 <main+0x55c>)
 8000cbe:	f7ff fd39 	bl	8000734 <lcd_print>
 8000cc2:	e00c      	b.n	8000cde <main+0x3c6>
			else if(modo_anterior == 1){lcd_print(&lcd, "modo run RX");
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <main+0x584>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d104      	bne.n	8000cd6 <main+0x3be>
 8000ccc:	496a      	ldr	r1, [pc, #424]	; (8000e78 <main+0x560>)
 8000cce:	4869      	ldr	r0, [pc, #420]	; (8000e74 <main+0x55c>)
 8000cd0:	f7ff fd30 	bl	8000734 <lcd_print>
 8000cd4:	e003      	b.n	8000cde <main+0x3c6>
			}
			else
			{
				lcd_print(&lcd, "modo run TX");
 8000cd6:	4973      	ldr	r1, [pc, #460]	; (8000ea4 <main+0x58c>)
 8000cd8:	4866      	ldr	r0, [pc, #408]	; (8000e74 <main+0x55c>)
 8000cda:	f7ff fd2b 	bl	8000734 <lcd_print>

			}
			tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000cde:	4b63      	ldr	r3, [pc, #396]	; (8000e6c <main+0x554>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	461c      	mov	r4, r3
 8000ce8:	4615      	mov	r5, r2
 8000cea:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <main+0x574>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	18a1      	adds	r1, r4, r2
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	eb45 0303 	adc.w	r3, r5, r3
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b64      	ldr	r3, [pc, #400]	; (8000e8c <main+0x574>)
 8000cfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000d00:	e9c3 1200 	strd	r1, r2, [r3]

	 	 break;
 8000d04:	e119      	b.n	8000f3a <main+0x622>

	 	case 2:

				 if ((__HAL_TIM_GET_COUNTER(&htim2) >= 2000) && estado == 0)//reinicia en counter y estado y posicion
 8000d06:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <main+0x554>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d10:	d341      	bcc.n	8000d96 <main+0x47e>
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <main+0x578>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d13d      	bne.n	8000d96 <main+0x47e>
				{
					lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4854      	ldr	r0, [pc, #336]	; (8000e74 <main+0x55c>)
 8000d22:	f7ff fc2b 	bl	800057c <lcd_begin>
					//lcd_clear(&lcd);
					lcd_setCursor(&lcd, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4852      	ldr	r0, [pc, #328]	; (8000e74 <main+0x55c>)
 8000d2c:	f7ff fcd0 	bl	80006d0 <lcd_setCursor>
					lcd_print(&lcd, "modo run TX");
 8000d30:	495c      	ldr	r1, [pc, #368]	; (8000ea4 <main+0x58c>)
 8000d32:	4850      	ldr	r0, [pc, #320]	; (8000e74 <main+0x55c>)
 8000d34:	f7ff fcfe 	bl	8000734 <lcd_print>
					lcd_setCursor(&lcd, 0, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	484d      	ldr	r0, [pc, #308]	; (8000e74 <main+0x55c>)
 8000d3e:	f7ff fcc7 	bl	80006d0 <lcd_setCursor>
					lcd_print(&lcd, "comando: ");
 8000d42:	494e      	ldr	r1, [pc, #312]	; (8000e7c <main+0x564>)
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <main+0x55c>)
 8000d46:	f7ff fcf5 	bl	8000734 <lcd_print>
					sprintf(texto, "%u", (comandoP + 1));
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <main+0x568>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	461a      	mov	r2, r3
 8000d52:	494c      	ldr	r1, [pc, #304]	; (8000e84 <main+0x56c>)
 8000d54:	484c      	ldr	r0, [pc, #304]	; (8000e88 <main+0x570>)
 8000d56:	f002 f9d5 	bl	8003104 <siprintf>
					lcd_print(&lcd, texto);
 8000d5a:	494b      	ldr	r1, [pc, #300]	; (8000e88 <main+0x570>)
 8000d5c:	4845      	ldr	r0, [pc, #276]	; (8000e74 <main+0x55c>)
 8000d5e:	f7ff fce9 	bl	8000734 <lcd_print>
					tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <main+0x554>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4691      	mov	r9, r2
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <main+0x574>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	eb18 0102 	adds.w	r1, r8, r2
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	eb49 0303 	adc.w	r3, r9, r3
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <main+0x574>)
 8000d82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d86:	e9c3 1200 	strd	r1, r2, [r3]
					__HAL_TIM_SET_COUNTER(&htim2,0);
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <main+0x554>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	6253      	str	r3, [r2, #36]	; 0x24
				{
 8000d92:	bf00      	nop

				 	 }
				 }


			 break;
 8000d94:	e0cf      	b.n	8000f36 <main+0x61e>
				 else if(estado == 1)
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <main+0x578>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f040 80cb 	bne.w	8000f36 <main+0x61e>
					 estado = 0;
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <main+0x578>)
 8000da2:	2300      	movs	r3, #0
 8000da4:	8013      	strh	r3, [r2, #0]
					 decimalToBinaryArray(comando[comandoP],cero, 35);
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <main+0x568>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <main+0x590>)
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	b293      	uxth	r3, r2
 8000db6:	2223      	movs	r2, #35	; 0x23
 8000db8:	493c      	ldr	r1, [pc, #240]	; (8000eac <main+0x594>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fb44 	bl	8001448 <decimalToBinaryArray>
					 for(int x=0 ; x<=70; x++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dc4:	e0ae      	b.n	8000f24 <main+0x60c>
						if(x==0 )
 8000dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d110      	bne.n	8000dee <main+0x4d6>
							__HAL_TIM_SET_COUNTER(&htim2,0);
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <main+0x554>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6253      	str	r3, [r2, #36]	; 0x24
							while(37<=__HAL_TIM_GET_COUNTER(&htim2))
 8000dd4:	e005      	b.n	8000de2 <main+0x4ca>
								 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ddc:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <main+0x598>)
 8000dde:	f001 f8eb 	bl	8001fb8 <HAL_GPIO_WritePin>
							while(37<=__HAL_TIM_GET_COUNTER(&htim2))
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <main+0x554>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2b24      	cmp	r3, #36	; 0x24
 8000dea:	d8f4      	bhi.n	8000dd6 <main+0x4be>
 8000dec:	e097      	b.n	8000f1e <main+0x606>
						else if((x/2)==34 )
 8000dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df0:	3b44      	subs	r3, #68	; 0x44
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d811      	bhi.n	8000e1a <main+0x502>
							__HAL_TIM_SET_COUNTER(&htim2,0);
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <main+0x554>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6253      	str	r3, [r2, #36]	; 0x24
							while(330<=__HAL_TIM_GET_COUNTER(&htim2))
 8000dfe:	e005      	b.n	8000e0c <main+0x4f4>
								 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <main+0x598>)
 8000e08:	f001 f8d6 	bl	8001fb8 <HAL_GPIO_WritePin>
							while(330<=__HAL_TIM_GET_COUNTER(&htim2))
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <main+0x554>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8000e16:	d2f3      	bcs.n	8000e00 <main+0x4e8>
 8000e18:	e081      	b.n	8000f1e <main+0x606>
						else if((x/2)==35 )
 8000e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e1c:	3b46      	subs	r3, #70	; 0x46
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d810      	bhi.n	8000e44 <main+0x52c>
							__HAL_TIM_SET_COUNTER(&htim2,0);
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <main+0x554>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	6253      	str	r3, [r2, #36]	; 0x24
							while(19<=__HAL_TIM_GET_COUNTER(&htim2))
 8000e2a:	e005      	b.n	8000e38 <main+0x520>
								 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <main+0x598>)
 8000e34:	f001 f8c0 	bl	8001fb8 <HAL_GPIO_WritePin>
							while(19<=__HAL_TIM_GET_COUNTER(&htim2))
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <main+0x554>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d8f4      	bhi.n	8000e2c <main+0x514>
 8000e42:	e06c      	b.n	8000f1e <main+0x606>
						else if(x % 2 == 0)//numero par
 8000e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d14f      	bne.n	8000eee <main+0x5d6>
							if(cero[x/2] == 1)//caso cuando este mostrando un uno
 8000e4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e50:	0fd3      	lsrs	r3, r2, #31
 8000e52:	4413      	add	r3, r2
 8000e54:	105b      	asrs	r3, r3, #1
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <main+0x594>)
 8000e5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d134      	bne.n	8000ecc <main+0x5b4>
								__HAL_TIM_SET_COUNTER(&htim2,0);
 8000e62:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <main+0x554>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	6253      	str	r3, [r2, #36]	; 0x24
								while(15<=__HAL_TIM_GET_COUNTER(&htim2))
 8000e6a:	e029      	b.n	8000ec0 <main+0x5a8>
 8000e6c:	2000007c 	.word	0x2000007c
 8000e70:	20000158 	.word	0x20000158
 8000e74:	20000250 	.word	0x20000250
 8000e78:	08003a98 	.word	0x08003a98
 8000e7c:	08003aa4 	.word	0x08003aa4
 8000e80:	2000015c 	.word	0x2000015c
 8000e84:	08003a80 	.word	0x08003a80
 8000e88:	2000022c 	.word	0x2000022c
 8000e8c:	20000220 	.word	0x20000220
 8000e90:	200000c4 	.word	0x200000c4
 8000e94:	20000248 	.word	0x20000248
 8000e98:	08003ab0 	.word	0x08003ab0
 8000e9c:	20000240 	.word	0x20000240
 8000ea0:	08003a64 	.word	0x08003a64
 8000ea4:	08003abc 	.word	0x08003abc
 8000ea8:	20000160 	.word	0x20000160
 8000eac:	20000110 	.word	0x20000110
 8000eb0:	40020400 	.word	0x40020400
									 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	4820      	ldr	r0, [pc, #128]	; (8000f3c <main+0x624>)
 8000ebc:	f001 f87c 	bl	8001fb8 <HAL_GPIO_WritePin>
								while(15<=__HAL_TIM_GET_COUNTER(&htim2))
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <main+0x628>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2b0e      	cmp	r3, #14
 8000ec8:	d8f4      	bhi.n	8000eb4 <main+0x59c>
 8000eca:	e028      	b.n	8000f1e <main+0x606>
								__HAL_TIM_SET_COUNTER(&htim2,0);
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <main+0x628>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6253      	str	r3, [r2, #36]	; 0x24
								while(5<=__HAL_TIM_GET_COUNTER(&htim2))
 8000ed4:	e005      	b.n	8000ee2 <main+0x5ca>
									 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <main+0x624>)
 8000ede:	f001 f86b 	bl	8001fb8 <HAL_GPIO_WritePin>
								while(5<=__HAL_TIM_GET_COUNTER(&htim2))
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <main+0x628>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d8f4      	bhi.n	8000ed6 <main+0x5be>
 8000eec:	e017      	b.n	8000f1e <main+0x606>
						else if(x % 2 != 0)//numero impar
 8000eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d012      	beq.n	8000f1e <main+0x606>
							__HAL_TIM_SET_COUNTER(&htim2,0);
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <main+0x628>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	6253      	str	r3, [r2, #36]	; 0x24
							while(uno[0]<=__HAL_TIM_GET_COUNTER(&htim2))
 8000f00:	e005      	b.n	8000f0e <main+0x5f6>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <main+0x624>)
 8000f0a:	f001 f855 	bl	8001fb8 <HAL_GPIO_WritePin>
							while(uno[0]<=__HAL_TIM_GET_COUNTER(&htim2))
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <main+0x62c>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <main+0x628>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d9f1      	bls.n	8000f02 <main+0x5ea>
					 for(int x=0 ; x<=70; x++)
 8000f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f20:	3301      	adds	r3, #1
 8000f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f26:	2b46      	cmp	r3, #70	; 0x46
 8000f28:	f77f af4d 	ble.w	8000dc6 <main+0x4ae>
			 break;
 8000f2c:	e003      	b.n	8000f36 <main+0x61e>
		 break;
 8000f2e:	bf00      	nop
 8000f30:	e525      	b.n	800097e <main+0x66>
	 	 break;
 8000f32:	bf00      	nop
 8000f34:	e523      	b.n	800097e <main+0x66>
			 break;
 8000f36:	bf00      	nop
 8000f38:	e521      	b.n	800097e <main+0x66>
	 switch(modo)
 8000f3a:	e520      	b.n	800097e <main+0x66>
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	200000c8 	.word	0x200000c8

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 f8f4 	bl	8003144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemClock_Config+0xd0>)
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fbc:	2319      	movs	r3, #25
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc0:	23a8      	movs	r3, #168	; 0xa8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f823 	bl	800201c <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fdc:	f000 fbaa 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fa85 	bl	800250c <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001008:	f000 fb94 	bl	8001734 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM2_Init+0x98>)
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001042:	f242 720f 	movw	r2, #9999	; 0x270f
 8001046:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_TIM2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001064:	f001 fc0a 	bl	800287c <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800106e:	f000 fb61 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001080:	f001 fd9e 	bl	8002bc0 <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800108a:	f000 fb53 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_TIM2_Init+0x98>)
 800109c:	f001 ffb0 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f000 fb45 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000007c 	.word	0x2000007c

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b52      	ldr	r3, [pc, #328]	; (800121c <MX_GPIO_Init+0x164>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a51      	ldr	r2, [pc, #324]	; (800121c <MX_GPIO_Init+0x164>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b4f      	ldr	r3, [pc, #316]	; (800121c <MX_GPIO_Init+0x164>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b4b      	ldr	r3, [pc, #300]	; (800121c <MX_GPIO_Init+0x164>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a4a      	ldr	r2, [pc, #296]	; (800121c <MX_GPIO_Init+0x164>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b48      	ldr	r3, [pc, #288]	; (800121c <MX_GPIO_Init+0x164>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <MX_GPIO_Init+0x164>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a43      	ldr	r2, [pc, #268]	; (800121c <MX_GPIO_Init+0x164>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <MX_GPIO_Init+0x164>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	21e2      	movs	r1, #226	; 0xe2
 8001126:	483e      	ldr	r0, [pc, #248]	; (8001220 <MX_GPIO_Init+0x168>)
 8001128:	f000 ff46 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|emisor_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f240 4105 	movw	r1, #1029	; 0x405
 8001132:	483c      	ldr	r0, [pc, #240]	; (8001224 <MX_GPIO_Init+0x16c>)
 8001134:	f000 ff40 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8001138:	23e2      	movs	r3, #226	; 0xe2
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	4834      	ldr	r0, [pc, #208]	; (8001220 <MX_GPIO_Init+0x168>)
 8001150:	f000 fdae 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin;
 8001154:	2305      	movs	r3, #5
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	482e      	ldr	r0, [pc, #184]	; (8001224 <MX_GPIO_Init+0x16c>)
 800116c:	f000 fda0 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_Pin centro_Pin */
  GPIO_InitStruct.Pin = IR_Pin|centro_Pin;
 8001170:	f244 0302 	movw	r3, #16386	; 0x4002
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001176:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4827      	ldr	r0, [pc, #156]	; (8001224 <MX_GPIO_Init+0x16c>)
 8001188:	f000 fd92 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : emisor_Pin */
  GPIO_InitStruct.Pin = emisor_Pin;
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(emisor_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	481f      	ldr	r0, [pc, #124]	; (8001224 <MX_GPIO_Init+0x16c>)
 80011a6:	f000 fd83 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : derecho_Pin */
  GPIO_InitStruct.Pin = derecho_Pin;
 80011aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(derecho_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_GPIO_Init+0x16c>)
 80011c2:	f000 fd75 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : izquierdo_Pin */
  GPIO_InitStruct.Pin = izquierdo_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(izquierdo_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_GPIO_Init+0x168>)
 80011de:	f000 fd67 	bl	8001cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fd2b 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ec:	2007      	movs	r0, #7
 80011ee:	f000 fd44 	bl	8001c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2017      	movs	r0, #23
 80011f8:	f000 fd23 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011fc:	2017      	movs	r0, #23
 80011fe:	f000 fd3c 	bl	8001c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f000 fd1b 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	; 0x28
 800120e:	f000 fd34 	bl	8001c7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400

08001228 <modo_run>:

/* USER CODE BEGIN 4 */

void modo_run()
{
 8001228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0

    // codificacion

    if(tiempito[1]>=37 && tiempito[34]>300 && tiempito[35]>18)//Reiniciar bandera
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <modo_run+0xf8>)
 8001232:	885b      	ldrh	r3, [r3, #2]
 8001234:	2b24      	cmp	r3, #36	; 0x24
 8001236:	d96e      	bls.n	8001316 <modo_run+0xee>
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <modo_run+0xf8>)
 800123a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001242:	d968      	bls.n	8001316 <modo_run+0xee>
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <modo_run+0xf8>)
 8001246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800124a:	2b12      	cmp	r3, #18
 800124c:	d963      	bls.n	8001316 <modo_run+0xee>
       {//Codificacion
    	for(int x = 0; x <= posicion; x++) // recorrer arreglo de cero
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e01c      	b.n	800128e <modo_run+0x66>
    	    {
    	        recividoN = (recividoN << 1) | cero[x]; // transforma de binario a decimal
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <modo_run+0xfc>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	eb12 0802 	adds.w	r8, r2, r2
 800125e:	eb43 0903 	adc.w	r9, r3, r3
 8001262:	46c2      	mov	sl, r8
 8001264:	46cb      	mov	fp, r9
 8001266:	4e30      	ldr	r6, [pc, #192]	; (8001328 <modo_run+0x100>)
 8001268:	4633      	mov	r3, r6
 800126a:	687e      	ldr	r6, [r7, #4]
 800126c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8001270:	b2b6      	uxth	r6, r6
 8001272:	f04f 0c00 	mov.w	ip, #0
 8001276:	4630      	mov	r0, r6
 8001278:	4661      	mov	r1, ip
 800127a:	ea4a 0400 	orr.w	r4, sl, r0
 800127e:	ea4b 0501 	orr.w	r5, fp, r1
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <modo_run+0xfc>)
 8001284:	e9c3 4500 	strd	r4, r5, [r3]
    	for(int x = 0; x <= posicion; x++) // recorrer arreglo de cero
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <modo_run+0x104>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4293      	cmp	r3, r2
 8001298:	dddc      	ble.n	8001254 <modo_run+0x2c>
    	    }

    	 for(int x = 0; x < 15; x++) // recorrer arreglo de comando
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	e037      	b.n	8001310 <modo_run+0xe8>
    	    {
    	        if(recividoN == comando[x])
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <modo_run+0x108>)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <modo_run+0xfc>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	4299      	cmp	r1, r3
 80012b4:	bf08      	it	eq
 80012b6:	4290      	cmpeq	r0, r2
 80012b8:	d127      	bne.n	800130a <modo_run+0xe2>
    	        {
    	            comandoP = x;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <modo_run+0x10c>)
 80012c0:	801a      	strh	r2, [r3, #0]
    	            lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 80012c2:	2300      	movs	r3, #0
 80012c4:	2202      	movs	r2, #2
 80012c6:	2110      	movs	r1, #16
 80012c8:	481b      	ldr	r0, [pc, #108]	; (8001338 <modo_run+0x110>)
 80012ca:	f7ff f957 	bl	800057c <lcd_begin>
    				//lcd_clear(&lcd);
    				lcd_setCursor(&lcd, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <modo_run+0x110>)
 80012d4:	f7ff f9fc 	bl	80006d0 <lcd_setCursor>
    				lcd_print(&lcd, "modo run");
 80012d8:	4918      	ldr	r1, [pc, #96]	; (800133c <modo_run+0x114>)
 80012da:	4817      	ldr	r0, [pc, #92]	; (8001338 <modo_run+0x110>)
 80012dc:	f7ff fa2a 	bl	8000734 <lcd_print>
    				lcd_setCursor(&lcd, 0, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2100      	movs	r1, #0
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <modo_run+0x110>)
 80012e6:	f7ff f9f3 	bl	80006d0 <lcd_setCursor>
    				lcd_print(&lcd, "comando:");
 80012ea:	4915      	ldr	r1, [pc, #84]	; (8001340 <modo_run+0x118>)
 80012ec:	4812      	ldr	r0, [pc, #72]	; (8001338 <modo_run+0x110>)
 80012ee:	f7ff fa21 	bl	8000734 <lcd_print>
    				sprintf(texto, "%u", (comandoP + 1));
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <modo_run+0x10c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	461a      	mov	r2, r3
 80012fa:	4912      	ldr	r1, [pc, #72]	; (8001344 <modo_run+0x11c>)
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <modo_run+0x120>)
 80012fe:	f001 ff01 	bl	8003104 <siprintf>
    				lcd_print(&lcd, texto);
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <modo_run+0x120>)
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <modo_run+0x110>)
 8001306:	f7ff fa15 	bl	8000734 <lcd_print>
    	 for(int x = 0; x < 15; x++) // recorrer arreglo de comando
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b0e      	cmp	r3, #14
 8001314:	ddc4      	ble.n	80012a0 <modo_run+0x78>
        }


    // busqueda

}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001320:	200001d8 	.word	0x200001d8
 8001324:	20000248 	.word	0x20000248
 8001328:	20000110 	.word	0x20000110
 800132c:	20000158 	.word	0x20000158
 8001330:	20000160 	.word	0x20000160
 8001334:	2000015c 	.word	0x2000015c
 8001338:	20000250 	.word	0x20000250
 800133c:	08003ac8 	.word	0x08003ac8
 8001340:	08003ad4 	.word	0x08003ad4
 8001344:	08003a80 	.word	0x08003a80
 8001348:	2000022c 	.word	0x2000022c

0800134c <modo_set>:

void modo_set()
{
 800134c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
    if(comandoP < 15)
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <modo_set+0xe0>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2b0e      	cmp	r3, #14
 800135a:	d85e      	bhi.n	800141a <modo_set+0xce>
    {

    	if(tiempito[1]>=37 && tiempito[34]>300 && tiempito[35]>18)//Reiniciar bandera
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <modo_set+0xe4>)
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	2b24      	cmp	r3, #36	; 0x24
 8001362:	d95d      	bls.n	8001420 <modo_set+0xd4>
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <modo_set+0xe4>)
 8001366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800136a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800136e:	d957      	bls.n	8001420 <modo_set+0xd4>
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <modo_set+0xe4>)
 8001372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001376:	2b12      	cmp	r3, #18
 8001378:	d952      	bls.n	8001420 <modo_set+0xd4>
    	{//Codificacion
    		for(int x = 0; x <= posicion; x++) // recorrer arreglo de cero
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e01c      	b.n	80013ba <modo_set+0x6e>
			{
				recividoN = (recividoN << 1) | cero[x]; // transforma de binario a decimal
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <modo_set+0xe8>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	eb12 0802 	adds.w	r8, r2, r2
 800138a:	eb43 0903 	adc.w	r9, r3, r3
 800138e:	46c2      	mov	sl, r8
 8001390:	46cb      	mov	fp, r9
 8001392:	4e29      	ldr	r6, [pc, #164]	; (8001438 <modo_set+0xec>)
 8001394:	4633      	mov	r3, r6
 8001396:	687e      	ldr	r6, [r7, #4]
 8001398:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 800139c:	b2b6      	uxth	r6, r6
 800139e:	f04f 0c00 	mov.w	ip, #0
 80013a2:	4630      	mov	r0, r6
 80013a4:	4661      	mov	r1, ip
 80013a6:	ea4a 0400 	orr.w	r4, sl, r0
 80013aa:	ea4b 0501 	orr.w	r5, fp, r1
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <modo_set+0xe8>)
 80013b0:	e9c3 4500 	strd	r4, r5, [r3]
    		for(int x = 0; x <= posicion; x++) // recorrer arreglo de cero
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <modo_set+0xf0>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	dddc      	ble.n	8001380 <modo_set+0x34>
			}

			comando[comandoP] = recividoN; // asigna el valor decimal a comando[comandoP]
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <modo_set+0xe0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <modo_set+0xe8>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <modo_set+0xf4>)
 80013d4:	00c9      	lsls	r1, r1, #3
 80013d6:	4401      	add	r1, r0
 80013d8:	e9c1 2300 	strd	r2, r3, [r1]

			comandoP++;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <modo_set+0xe0>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <modo_set+0xe0>)
 80013e6:	801a      	strh	r2, [r3, #0]

    		tiempito[34]=0;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <modo_set+0xe4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    		tiempito[35]=0;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <modo_set+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    		tiempito[1]=0;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <modo_set+0xe4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	805a      	strh	r2, [r3, #2]
			estado = 0;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <modo_set+0xf8>)
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
			posicion = 0;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <modo_set+0xf0>)
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
			recividoN=0;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <modo_set+0xe8>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2300 	strd	r2, r3, [r1]
    }
    else
    {
        comandoP = 0;
    }
}
 8001418:	e002      	b.n	8001420 <modo_set+0xd4>
        comandoP = 0;
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <modo_set+0xe0>)
 800141c:	2200      	movs	r2, #0
 800141e:	801a      	strh	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800142a:	4770      	bx	lr
 800142c:	2000015c 	.word	0x2000015c
 8001430:	200001d8 	.word	0x200001d8
 8001434:	20000248 	.word	0x20000248
 8001438:	20000110 	.word	0x20000110
 800143c:	20000158 	.word	0x20000158
 8001440:	20000160 	.word	0x20000160
 8001444:	200000c4 	.word	0x200000c4

08001448 <decimalToBinaryArray>:
        exponente /= 2;
        base *= base;
    }
    return result;
}
void decimalToBinaryArray(uint16_t decimal, uint16_t *binaryArray, uint16_t *numBits) {
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	81fb      	strh	r3, [r7, #14]
    *numBits = 0; // Inicializar el contador de bits
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	801a      	strh	r2, [r3, #0]

    // Convertir decimal a binario utilizando bit shifting
    do {
        binaryArray[*numBits] = decimal & 1; // Obtener el bit menos significativo
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	4413      	add	r3, r2
 8001466:	89fa      	ldrh	r2, [r7, #14]
 8001468:	f002 0201 	and.w	r2, r2, #1
 800146c:	b292      	uxth	r2, r2
 800146e:	801a      	strh	r2, [r3, #0]
        decimal >>= 1; // Desplazar el número decimal un bit a la derecha
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	81fb      	strh	r3, [r7, #14]
        (*numBits)++; // Incrementar el contador de bits
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	801a      	strh	r2, [r3, #0]
    } while (decimal > 0);
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e9      	bne.n	800145c <decimalToBinaryArray+0x14>

    // Invertir el arreglo de bits para que esté en el orden correcto
    for (uint16_t i = 0; i < *numBits / 2; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	82fb      	strh	r3, [r7, #22]
 800148c:	e026      	b.n	80014dc <decimalToBinaryArray+0x94>
        uint16_t temp = binaryArray[i];
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	82bb      	strh	r3, [r7, #20]
        binaryArray[i] = binaryArray[*numBits - i - 1];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014a8:	3b01      	subs	r3, #1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	441a      	add	r2, r3
 80014b0:	8afb      	ldrh	r3, [r7, #22]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	440b      	add	r3, r1
 80014b8:	8812      	ldrh	r2, [r2, #0]
 80014ba:	801a      	strh	r2, [r3, #0]
        binaryArray[*numBits - i - 1] = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	8afb      	ldrh	r3, [r7, #22]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4413      	add	r3, r2
 80014d2:	8aba      	ldrh	r2, [r7, #20]
 80014d4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < *numBits / 2; i++) {
 80014d6:	8afb      	ldrh	r3, [r7, #22]
 80014d8:	3301      	adds	r3, #1
 80014da:	82fb      	strh	r3, [r7, #22]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	8afa      	ldrh	r2, [r7, #22]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3d1      	bcc.n	800148e <decimalToBinaryArray+0x46>
    }
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	81fb      	strh	r3, [r7, #14]

	if(GPIO_Pin == IR_Pin)//que interrupcion esta activada
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d167      	bne.n	80015da <HAL_GPIO_EXTI_Callback+0xe2>
	{
		switch(estado)
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_GPIO_EXTI_Callback+0x210>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <HAL_GPIO_EXTI_Callback+0x20>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d039      	beq.n	800158a <HAL_GPIO_EXTI_Callback+0x92>
			else{comandoP --;}
		}

	}

}
 8001516:	e0f1      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			uint16_t x = __HAL_TIM_GET_COUNTER(&htim2);
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	82fb      	strh	r3, [r7, #22]
			if(x > 6)//guarda un 1 o 0 deoendiendo de cuanto tiempo se demore
 8001520:	8afb      	ldrh	r3, [r7, #22]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d907      	bls.n	8001536 <HAL_GPIO_EXTI_Callback+0x3e>
				cero [posicion]=1;
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b79      	ldr	r3, [pc, #484]	; (8001714 <HAL_GPIO_EXTI_Callback+0x21c>)
 800152e:	2101      	movs	r1, #1
 8001530:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001534:	e006      	b.n	8001544 <HAL_GPIO_EXTI_Callback+0x4c>
				cero [posicion]=0;
 8001536:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b75      	ldr	r3, [pc, #468]	; (8001714 <HAL_GPIO_EXTI_Callback+0x21c>)
 800153e:	2100      	movs	r1, #0
 8001540:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			tiempito[posicion] = x;
 8001544:	4b72      	ldr	r3, [pc, #456]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_GPIO_EXTI_Callback+0x220>)
 800154c:	8afb      	ldrh	r3, [r7, #22]
 800154e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			tiempoa = tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	2200      	movs	r2, #0
 800155a:	4698      	mov	r8, r3
 800155c:	4691      	mov	r9, r2
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_GPIO_EXTI_Callback+0x224>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	eb18 0102 	adds.w	r1, r8, r2
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	eb49 0303 	adc.w	r3, r9, r3
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_GPIO_EXTI_Callback+0x224>)
 8001572:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001576:	e9c3 1200 	strd	r1, r2, [r3]
		  	__HAL_TIM_SET_COUNTER(&htim2,0);//reinicia el counter
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
		  	estado = 1;//envia a estado 0 para guardar y recetear el counter
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_GPIO_EXTI_Callback+0x210>)
 8001584:	2201      	movs	r2, #1
 8001586:	801a      	strh	r2, [r3, #0]
		break;
 8001588:	e0b8      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			uno [posicion]= __HAL_TIM_GET_COUNTER(&htim2);
 800158a:	4b60      	ldr	r3, [pc, #384]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	b289      	uxth	r1, r1
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_GPIO_EXTI_Callback+0x228>)
 800159a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			tiempoa=tiempoa + __HAL_TIM_GET_COUNTER(&htim2);
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2200      	movs	r2, #0
 80015a6:	461c      	mov	r4, r3
 80015a8:	4615      	mov	r5, r2
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_GPIO_EXTI_Callback+0x224>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	eb14 0a02 	adds.w	sl, r4, r2
 80015b4:	eb45 0b03 	adc.w	fp, r5, r3
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_GPIO_EXTI_Callback+0x224>)
 80015ba:	e9c3 ab00 	strd	sl, fp, [r3]
			__HAL_TIM_SET_COUNTER(&htim2,0);//reiniciar el counter
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
				posicion ++;// cambia la posicion en el arreglo
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_GPIO_EXTI_Callback+0x218>)
 80015d0:	801a      	strh	r2, [r3, #0]
			estado = 0;//envia a estado 1 para guardar y recetear el counter
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_GPIO_EXTI_Callback+0x210>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
		break;
 80015d8:	e090      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
	else if(GPIO_Pin == derecho_Pin)
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e0:	d125      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x136>
		if(modo==3)
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d10e      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x110>
			if(modo_anterior == 2){modo_anterior = 0;}
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d103      	bne.n	80015fa <HAL_GPIO_EXTI_Callback+0x102>
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
}
 80015f8:	e080      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			else{modo_anterior ++;}
 80015fa:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 8001604:	801a      	strh	r2, [r3, #0]
}
 8001606:	e079      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
		}else if(modo==2)
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d175      	bne.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			if(comandoP == 14){comandoP = 0;}
 8001610:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2b0e      	cmp	r3, #14
 8001616:	d103      	bne.n	8001620 <HAL_GPIO_EXTI_Callback+0x128>
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
}
 800161e:	e06d      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			else{comandoP ++;}
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 800162a:	801a      	strh	r2, [r3, #0]
}
 800162c:	e066      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
	else if(GPIO_Pin == centro_Pin)
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001634:	d138      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0x1b0>
		switch (tiempoe)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_GPIO_EXTI_Callback+0x238>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_GPIO_EXTI_Callback+0x14c>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00f      	beq.n	8001662 <HAL_GPIO_EXTI_Callback+0x16a>
}
 8001642:	e05b      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
			tiempoa = 0;
 800164c:	4933      	ldr	r1, [pc, #204]	; (800171c <HAL_GPIO_EXTI_Callback+0x224>)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
			tiempoe = 1;
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_GPIO_EXTI_Callback+0x238>)
 800165c:	2201      	movs	r2, #1
 800165e:	801a      	strh	r2, [r3, #0]
		break;
 8001660:	e04c      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			tiempoe =0;
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_GPIO_EXTI_Callback+0x238>)
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]
			if(modo==2)
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d10e      	bne.n	800168e <HAL_GPIO_EXTI_Callback+0x196>
				if(__HAL_TIM_GET_COUNTER(&htim2)> 42000)
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_GPIO_EXTI_Callback+0x214>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f24a 4210 	movw	r2, #42000	; 0xa410
 800167a:	4293      	cmp	r3, r2
 800167c:	d903      	bls.n	8001686 <HAL_GPIO_EXTI_Callback+0x18e>
					modo = 3;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001680:	2203      	movs	r2, #3
 8001682:	801a      	strh	r2, [r3, #0]
		break;
 8001684:	e03a      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
					estado =1;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_GPIO_EXTI_Callback+0x210>)
 8001688:	2201      	movs	r2, #1
 800168a:	801a      	strh	r2, [r3, #0]
		break;
 800168c:	e036      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			else if(modo != 3)
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d003      	beq.n	800169e <HAL_GPIO_EXTI_Callback+0x1a6>
				modo = 3;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001698:	2203      	movs	r2, #3
 800169a:	801a      	strh	r2, [r3, #0]
		break;
 800169c:	e02e      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
				modo = modo_anterior;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 80016a4:	801a      	strh	r2, [r3, #0]
		break;
 80016a6:	e029      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
	else if(GPIO_Pin == izquierdo_Pin)
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ae:	d125      	bne.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
		if(modo==3)
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d10e      	bne.n	80016d6 <HAL_GPIO_EXTI_Callback+0x1de>
			if(modo_anterior == 0){modo_anterior = 2;}
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x1d0>
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	801a      	strh	r2, [r3, #0]
}
 80016c6:	e019      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			else{modo_anterior --;}
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_GPIO_EXTI_Callback+0x230>)
 80016d2:	801a      	strh	r2, [r3, #0]
}
 80016d4:	e012      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
		else if(modo==2)
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_GPIO_EXTI_Callback+0x22c>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d10e      	bne.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			if(comandoP == 0){comandoP = 14;}
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <HAL_GPIO_EXTI_Callback+0x1f6>
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 80016e8:	220e      	movs	r2, #14
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
			else{comandoP --;}
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_GPIO_EXTI_Callback+0x234>)
 80016f8:	801a      	strh	r2, [r3, #0]
}
 80016fa:	e7ff      	b.n	80016fc <HAL_GPIO_EXTI_Callback+0x204>
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001706:	4770      	bx	lr
 8001708:	200000c4 	.word	0x200000c4
 800170c:	2000007c 	.word	0x2000007c
 8001710:	20000158 	.word	0x20000158
 8001714:	20000110 	.word	0x20000110
 8001718:	200001d8 	.word	0x200001d8
 800171c:	20000220 	.word	0x20000220
 8001720:	200000c8 	.word	0x200000c8
 8001724:	2000015a 	.word	0x2000015a
 8001728:	20000240 	.word	0x20000240
 800172c:	2000015c 	.word	0x2000015c
 8001730:	20000228 	.word	0x20000228

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d115      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201c      	movs	r0, #28
 80017c4:	f000 fa3d 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c8:	201c      	movs	r0, #28
 80017ca:	f000 fa56 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 f8ec 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8001834:	2002      	movs	r0, #2
 8001836:	f000 fbd9 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(izquierdo_Pin);
 8001842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001846:	f000 fbd1 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM2_IRQHandler+0x10>)
 8001856:	f001 f8c3 	bl	80029e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000007c 	.word	0x2000007c

08001864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(centro_Pin);
 8001868:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800186c:	f000 fbbe 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(derecho_Pin);
 8001870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001874:	f000 fbba 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f001 fc52 	bl	8003154 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20010000 	.word	0x20010000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	20000290 	.word	0x20000290
 80018e4:	200003e0 	.word	0x200003e0

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193a:	f001 fc11 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7fe ffeb 	bl	8000918 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001950:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8001954:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001958:	200003e0 	.word	0x200003e0

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94f 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	200f      	movs	r0, #15
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fed4 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f967 	bl	8001c96 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f92f 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000294 	.word	0x20000294

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000294 	.word	0x20000294

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e159      	b.n	8001f80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8148 	bne.w	8001f7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a2 	beq.w	8001f7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a56      	ldr	r2, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b54      	ldr	r3, [pc, #336]	; (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_GPIO_Init+0x2ec>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x202>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_GPIO_Init+0x2f4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x1fe>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a47      	ldr	r2, [pc, #284]	; (8001fa8 <HAL_GPIO_Init+0x2f8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x1fa>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a46      	ldr	r2, [pc, #280]	; (8001fac <HAL_GPIO_Init+0x2fc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x1f6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <HAL_GPIO_Init+0x300>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x1f2>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2ec>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f aea2 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fa74 	bl	80014f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e267      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00c      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b85      	ldr	r3, [pc, #532]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	2b08      	cmp	r3, #8
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b7e      	ldr	r3, [pc, #504]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e242      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6c      	ldr	r2, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fcaa 	bl	8001a2c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fca6 	bl	8001a2c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e207      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fc96 	bl	8001a2c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc92 	bl	8001a2c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1f3      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1c7      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4937      	ldr	r1, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x244>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff fc4b 	bl	8001a2c <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fc47 	bl	8001a2c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1a8      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4925      	ldr	r1, [pc, #148]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_OscConfig+0x244>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fc2a 	bl	8001a2c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc26 	bl	8001a2c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e187      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d036      	beq.n	8002274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x248>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff fc0a 	bl	8001a2c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fc06 	bl	8001a2c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e167      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
 800223a:	e01b      	b.n	8002274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_OscConfig+0x248>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbf3 	bl	8001a2c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	e00e      	b.n	8002268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fbef 	bl	8001a2c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d907      	bls.n	8002268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e150      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
 800225c:	40023800 	.word	0x40023800
 8002260:	42470000 	.word	0x42470000
 8002264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ea      	bne.n	800224a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8097 	beq.w	80023b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b7d      	ldr	r3, [pc, #500]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a7c      	ldr	r2, [pc, #496]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b7a      	ldr	r3, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b74      	ldr	r3, [pc, #464]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a73      	ldr	r2, [pc, #460]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fbaf 	bl	8001a2c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff fbab 	bl	8001a2c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e10c      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x2ea>
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a63      	ldr	r2, [pc, #396]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x324>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x30c>
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5b      	ldr	r2, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0x324>
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0304 	bic.w	r3, r3, #4
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff fb70 	bl	8001a2c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7ff fb6c 	bl	8001a2c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0cb      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ee      	beq.n	8002350 <HAL_RCC_OscConfig+0x334>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7ff fb5a 	bl	8001a2c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7ff fb56 	bl	8001a2c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0b5      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ee      	bne.n	800237c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a1 	beq.w	80024fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ba:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d05c      	beq.n	8002480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d141      	bne.n	8002452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fb2a 	bl	8001a2c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff fb26 	bl	8001a2c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e087      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff faff 	bl	8001a2c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff fafb 	bl	8001a2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e05c      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x416>
 8002450:	e054      	b.n	80024fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fae8 	bl	8001a2c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fae4 	bl	8001a2c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e045      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x444>
 800247e:	e03d      	b.n	80024fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e038      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
 8002494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x4ec>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d028      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d121      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11a      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d111      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fa16 	bl	8001a2c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff fa12 	bl	8001a2c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f976 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08003ae0 	.word	0x08003ae0
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b090      	sub	sp, #64	; 0x40
 80026de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	2300      	movs	r3, #0
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e8:	2300      	movs	r3, #0
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d00d      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x40>
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	f200 80a1 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x16c>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x3a>
 800270a:	e09b      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_GetSysClockFreq+0x184>)
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002710:	e09b      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_GetSysClockFreq+0x188>)
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002716:	e098      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d028      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	627a      	str	r2, [r7, #36]	; 0x24
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002740:	2100      	movs	r1, #0
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_GetSysClockFreq+0x188>)
 8002744:	fb03 f201 	mul.w	r2, r3, r1
 8002748:	2300      	movs	r3, #0
 800274a:	fb00 f303 	mul.w	r3, r0, r3
 800274e:	4413      	add	r3, r2
 8002750:	4a43      	ldr	r2, [pc, #268]	; (8002860 <HAL_RCC_GetSysClockFreq+0x188>)
 8002752:	fba0 1202 	umull	r1, r2, r0, r2
 8002756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002758:	460a      	mov	r2, r1
 800275a:	62ba      	str	r2, [r7, #40]	; 0x28
 800275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275e:	4413      	add	r3, r2
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	2200      	movs	r2, #0
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002772:	f7fd fd85 	bl	8000280 <__aeabi_uldivmod>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4613      	mov	r3, r2
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	e053      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	617a      	str	r2, [r7, #20]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002792:	f04f 0b00 	mov.w	fp, #0
 8002796:	4652      	mov	r2, sl
 8002798:	465b      	mov	r3, fp
 800279a:	f04f 0000 	mov.w	r0, #0
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	0159      	lsls	r1, r3, #5
 80027a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a8:	0150      	lsls	r0, r2, #5
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	ebb2 080a 	subs.w	r8, r2, sl
 80027b2:	eb63 090b 	sbc.w	r9, r3, fp
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ca:	ebb2 0408 	subs.w	r4, r2, r8
 80027ce:	eb63 0509 	sbc.w	r5, r3, r9
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	00eb      	lsls	r3, r5, #3
 80027dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e0:	00e2      	lsls	r2, r4, #3
 80027e2:	4614      	mov	r4, r2
 80027e4:	461d      	mov	r5, r3
 80027e6:	eb14 030a 	adds.w	r3, r4, sl
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	eb45 030b 	adc.w	r3, r5, fp
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	2200      	movs	r2, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	60fa      	str	r2, [r7, #12]
 8002818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800281c:	f7fd fd30 	bl	8000280 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x184>)
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800284c:	4618      	mov	r0, r3
 800284e:	3740      	adds	r7, #64	; 0x40
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	017d7840 	.word	0x017d7840

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe ff74 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fa7a 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e044      	b.n	80029be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x6c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d013      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x6c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x6c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x6c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x6c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000

080029e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9a3 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f995 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9a6 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f97d 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f96f 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f980 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0208 	mvn.w	r2, #8
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f957 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f949 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f95a 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f931 	bl	8002d76 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f923 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f934 	bl	8002d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f901 	bl	8002d4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fac0 	bl	80030f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f905 	bl	8002d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0220 	mvn.w	r2, #32
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa92 	bl	80030dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_ConfigClockSource+0x1c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0b4      	b.n	8002d46 <HAL_TIM_ConfigClockSource+0x186>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d03e      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0xd4>
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	f200 8087 	bhi.w	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	f000 8086 	beq.w	8002d32 <HAL_TIM_ConfigClockSource+0x172>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d87f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b70      	cmp	r3, #112	; 0x70
 8002c2e:	d01a      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xa6>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d87b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b60      	cmp	r3, #96	; 0x60
 8002c36:	d050      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x11a>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d877      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b50      	cmp	r3, #80	; 0x50
 8002c3e:	d03c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xfa>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d873      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d058      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x13a>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d86f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	d064      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d86b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d060      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d867      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d05a      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	e062      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c76:	f000 f9a3 	bl	8002fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	609a      	str	r2, [r3, #8]
      break;
 8002c92:	e04f      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ca4:	f000 f98c 	bl	8002fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb6:	609a      	str	r2, [r3, #8]
      break;
 8002cb8:	e03c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 f900 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2150      	movs	r1, #80	; 0x50
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f959 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e02c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 f91f 	bl	8002f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2160      	movs	r1, #96	; 0x60
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f949 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e01c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 f8e0 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f939 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d18:	e00c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 f930 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d2a:	e003      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e000      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <TIM_Base_SetConfig+0xfc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00f      	beq.n	8002dec <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d00b      	beq.n	8002dec <TIM_Base_SetConfig+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <TIM_Base_SetConfig+0x100>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x38>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a36      	ldr	r2, [pc, #216]	; (8002eb8 <TIM_Base_SetConfig+0x104>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x38>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <TIM_Base_SetConfig+0x108>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <TIM_Base_SetConfig+0xfc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01b      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d017      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_Base_SetConfig+0x100>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <TIM_Base_SetConfig+0x104>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <TIM_Base_SetConfig+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <TIM_Base_SetConfig+0x10c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <TIM_Base_SetConfig+0x110>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0x8a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <TIM_Base_SetConfig+0xfc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d103      	bne.n	8002e84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800

08002ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 030a 	bic.w	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f023 0210 	bic.w	r2, r3, #16
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	031b      	lsls	r3, r3, #12
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003014:	2302      	movs	r3, #2
 8003016:	e050      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d013      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40014000 	.word	0x40014000

080030dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <siprintf>:
 8003104:	b40e      	push	{r1, r2, r3}
 8003106:	b500      	push	{lr}
 8003108:	b09c      	sub	sp, #112	; 0x70
 800310a:	ab1d      	add	r3, sp, #116	; 0x74
 800310c:	9002      	str	r0, [sp, #8]
 800310e:	9006      	str	r0, [sp, #24]
 8003110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003114:	4809      	ldr	r0, [pc, #36]	; (800313c <siprintf+0x38>)
 8003116:	9107      	str	r1, [sp, #28]
 8003118:	9104      	str	r1, [sp, #16]
 800311a:	4909      	ldr	r1, [pc, #36]	; (8003140 <siprintf+0x3c>)
 800311c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003120:	9105      	str	r1, [sp, #20]
 8003122:	6800      	ldr	r0, [r0, #0]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	a902      	add	r1, sp, #8
 8003128:	f000 f992 	bl	8003450 <_svfiprintf_r>
 800312c:	9b02      	ldr	r3, [sp, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	b01c      	add	sp, #112	; 0x70
 8003134:	f85d eb04 	ldr.w	lr, [sp], #4
 8003138:	b003      	add	sp, #12
 800313a:	4770      	bx	lr
 800313c:	20000058 	.word	0x20000058
 8003140:	ffff0208 	.word	0xffff0208

08003144 <memset>:
 8003144:	4402      	add	r2, r0
 8003146:	4603      	mov	r3, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	f803 1b01 	strb.w	r1, [r3], #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <__errno>:
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <__errno+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000058 	.word	0x20000058

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4d0d      	ldr	r5, [pc, #52]	; (8003198 <__libc_init_array+0x38>)
 8003164:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	2600      	movs	r6, #0
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	4d0b      	ldr	r5, [pc, #44]	; (80031a0 <__libc_init_array+0x40>)
 8003172:	4c0c      	ldr	r4, [pc, #48]	; (80031a4 <__libc_init_array+0x44>)
 8003174:	f000 fc6a 	bl	8003a4c <_init>
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	2600      	movs	r6, #0
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	08003b2c 	.word	0x08003b2c
 800319c:	08003b2c 	.word	0x08003b2c
 80031a0:	08003b2c 	.word	0x08003b2c
 80031a4:	08003b30 	.word	0x08003b30

080031a8 <__retarget_lock_acquire_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__retarget_lock_release_recursive>:
 80031aa:	4770      	bx	lr

080031ac <_free_r>:
 80031ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031ae:	2900      	cmp	r1, #0
 80031b0:	d044      	beq.n	800323c <_free_r+0x90>
 80031b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b6:	9001      	str	r0, [sp, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f1a1 0404 	sub.w	r4, r1, #4
 80031be:	bfb8      	it	lt
 80031c0:	18e4      	addlt	r4, r4, r3
 80031c2:	f000 f8df 	bl	8003384 <__malloc_lock>
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <_free_r+0x94>)
 80031c8:	9801      	ldr	r0, [sp, #4]
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	b933      	cbnz	r3, 80031dc <_free_r+0x30>
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	6014      	str	r4, [r2, #0]
 80031d2:	b003      	add	sp, #12
 80031d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031d8:	f000 b8da 	b.w	8003390 <__malloc_unlock>
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d908      	bls.n	80031f2 <_free_r+0x46>
 80031e0:	6825      	ldr	r5, [r4, #0]
 80031e2:	1961      	adds	r1, r4, r5
 80031e4:	428b      	cmp	r3, r1
 80031e6:	bf01      	itttt	eq
 80031e8:	6819      	ldreq	r1, [r3, #0]
 80031ea:	685b      	ldreq	r3, [r3, #4]
 80031ec:	1949      	addeq	r1, r1, r5
 80031ee:	6021      	streq	r1, [r4, #0]
 80031f0:	e7ed      	b.n	80031ce <_free_r+0x22>
 80031f2:	461a      	mov	r2, r3
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b10b      	cbz	r3, 80031fc <_free_r+0x50>
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	d9fa      	bls.n	80031f2 <_free_r+0x46>
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	1855      	adds	r5, r2, r1
 8003200:	42a5      	cmp	r5, r4
 8003202:	d10b      	bne.n	800321c <_free_r+0x70>
 8003204:	6824      	ldr	r4, [r4, #0]
 8003206:	4421      	add	r1, r4
 8003208:	1854      	adds	r4, r2, r1
 800320a:	42a3      	cmp	r3, r4
 800320c:	6011      	str	r1, [r2, #0]
 800320e:	d1e0      	bne.n	80031d2 <_free_r+0x26>
 8003210:	681c      	ldr	r4, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	6053      	str	r3, [r2, #4]
 8003216:	440c      	add	r4, r1
 8003218:	6014      	str	r4, [r2, #0]
 800321a:	e7da      	b.n	80031d2 <_free_r+0x26>
 800321c:	d902      	bls.n	8003224 <_free_r+0x78>
 800321e:	230c      	movs	r3, #12
 8003220:	6003      	str	r3, [r0, #0]
 8003222:	e7d6      	b.n	80031d2 <_free_r+0x26>
 8003224:	6825      	ldr	r5, [r4, #0]
 8003226:	1961      	adds	r1, r4, r5
 8003228:	428b      	cmp	r3, r1
 800322a:	bf04      	itt	eq
 800322c:	6819      	ldreq	r1, [r3, #0]
 800322e:	685b      	ldreq	r3, [r3, #4]
 8003230:	6063      	str	r3, [r4, #4]
 8003232:	bf04      	itt	eq
 8003234:	1949      	addeq	r1, r1, r5
 8003236:	6021      	streq	r1, [r4, #0]
 8003238:	6054      	str	r4, [r2, #4]
 800323a:	e7ca      	b.n	80031d2 <_free_r+0x26>
 800323c:	b003      	add	sp, #12
 800323e:	bd30      	pop	{r4, r5, pc}
 8003240:	200003d8 	.word	0x200003d8

08003244 <sbrk_aligned>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4e0e      	ldr	r6, [pc, #56]	; (8003280 <sbrk_aligned+0x3c>)
 8003248:	460c      	mov	r4, r1
 800324a:	6831      	ldr	r1, [r6, #0]
 800324c:	4605      	mov	r5, r0
 800324e:	b911      	cbnz	r1, 8003256 <sbrk_aligned+0x12>
 8003250:	f000 fba6 	bl	80039a0 <_sbrk_r>
 8003254:	6030      	str	r0, [r6, #0]
 8003256:	4621      	mov	r1, r4
 8003258:	4628      	mov	r0, r5
 800325a:	f000 fba1 	bl	80039a0 <_sbrk_r>
 800325e:	1c43      	adds	r3, r0, #1
 8003260:	d00a      	beq.n	8003278 <sbrk_aligned+0x34>
 8003262:	1cc4      	adds	r4, r0, #3
 8003264:	f024 0403 	bic.w	r4, r4, #3
 8003268:	42a0      	cmp	r0, r4
 800326a:	d007      	beq.n	800327c <sbrk_aligned+0x38>
 800326c:	1a21      	subs	r1, r4, r0
 800326e:	4628      	mov	r0, r5
 8003270:	f000 fb96 	bl	80039a0 <_sbrk_r>
 8003274:	3001      	adds	r0, #1
 8003276:	d101      	bne.n	800327c <sbrk_aligned+0x38>
 8003278:	f04f 34ff 	mov.w	r4, #4294967295
 800327c:	4620      	mov	r0, r4
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	200003dc 	.word	0x200003dc

08003284 <_malloc_r>:
 8003284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003288:	1ccd      	adds	r5, r1, #3
 800328a:	f025 0503 	bic.w	r5, r5, #3
 800328e:	3508      	adds	r5, #8
 8003290:	2d0c      	cmp	r5, #12
 8003292:	bf38      	it	cc
 8003294:	250c      	movcc	r5, #12
 8003296:	2d00      	cmp	r5, #0
 8003298:	4607      	mov	r7, r0
 800329a:	db01      	blt.n	80032a0 <_malloc_r+0x1c>
 800329c:	42a9      	cmp	r1, r5
 800329e:	d905      	bls.n	80032ac <_malloc_r+0x28>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	2600      	movs	r6, #0
 80032a6:	4630      	mov	r0, r6
 80032a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003380 <_malloc_r+0xfc>
 80032b0:	f000 f868 	bl	8003384 <__malloc_lock>
 80032b4:	f8d8 3000 	ldr.w	r3, [r8]
 80032b8:	461c      	mov	r4, r3
 80032ba:	bb5c      	cbnz	r4, 8003314 <_malloc_r+0x90>
 80032bc:	4629      	mov	r1, r5
 80032be:	4638      	mov	r0, r7
 80032c0:	f7ff ffc0 	bl	8003244 <sbrk_aligned>
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	4604      	mov	r4, r0
 80032c8:	d155      	bne.n	8003376 <_malloc_r+0xf2>
 80032ca:	f8d8 4000 	ldr.w	r4, [r8]
 80032ce:	4626      	mov	r6, r4
 80032d0:	2e00      	cmp	r6, #0
 80032d2:	d145      	bne.n	8003360 <_malloc_r+0xdc>
 80032d4:	2c00      	cmp	r4, #0
 80032d6:	d048      	beq.n	800336a <_malloc_r+0xe6>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	4631      	mov	r1, r6
 80032dc:	4638      	mov	r0, r7
 80032de:	eb04 0903 	add.w	r9, r4, r3
 80032e2:	f000 fb5d 	bl	80039a0 <_sbrk_r>
 80032e6:	4581      	cmp	r9, r0
 80032e8:	d13f      	bne.n	800336a <_malloc_r+0xe6>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1a6d      	subs	r5, r5, r1
 80032ee:	4629      	mov	r1, r5
 80032f0:	4638      	mov	r0, r7
 80032f2:	f7ff ffa7 	bl	8003244 <sbrk_aligned>
 80032f6:	3001      	adds	r0, #1
 80032f8:	d037      	beq.n	800336a <_malloc_r+0xe6>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	442b      	add	r3, r5
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	f8d8 3000 	ldr.w	r3, [r8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d038      	beq.n	800337a <_malloc_r+0xf6>
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	42a2      	cmp	r2, r4
 800330c:	d12b      	bne.n	8003366 <_malloc_r+0xe2>
 800330e:	2200      	movs	r2, #0
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	e00f      	b.n	8003334 <_malloc_r+0xb0>
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	1b52      	subs	r2, r2, r5
 8003318:	d41f      	bmi.n	800335a <_malloc_r+0xd6>
 800331a:	2a0b      	cmp	r2, #11
 800331c:	d917      	bls.n	800334e <_malloc_r+0xca>
 800331e:	1961      	adds	r1, r4, r5
 8003320:	42a3      	cmp	r3, r4
 8003322:	6025      	str	r5, [r4, #0]
 8003324:	bf18      	it	ne
 8003326:	6059      	strne	r1, [r3, #4]
 8003328:	6863      	ldr	r3, [r4, #4]
 800332a:	bf08      	it	eq
 800332c:	f8c8 1000 	streq.w	r1, [r8]
 8003330:	5162      	str	r2, [r4, r5]
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	4638      	mov	r0, r7
 8003336:	f104 060b 	add.w	r6, r4, #11
 800333a:	f000 f829 	bl	8003390 <__malloc_unlock>
 800333e:	f026 0607 	bic.w	r6, r6, #7
 8003342:	1d23      	adds	r3, r4, #4
 8003344:	1af2      	subs	r2, r6, r3
 8003346:	d0ae      	beq.n	80032a6 <_malloc_r+0x22>
 8003348:	1b9b      	subs	r3, r3, r6
 800334a:	50a3      	str	r3, [r4, r2]
 800334c:	e7ab      	b.n	80032a6 <_malloc_r+0x22>
 800334e:	42a3      	cmp	r3, r4
 8003350:	6862      	ldr	r2, [r4, #4]
 8003352:	d1dd      	bne.n	8003310 <_malloc_r+0x8c>
 8003354:	f8c8 2000 	str.w	r2, [r8]
 8003358:	e7ec      	b.n	8003334 <_malloc_r+0xb0>
 800335a:	4623      	mov	r3, r4
 800335c:	6864      	ldr	r4, [r4, #4]
 800335e:	e7ac      	b.n	80032ba <_malloc_r+0x36>
 8003360:	4634      	mov	r4, r6
 8003362:	6876      	ldr	r6, [r6, #4]
 8003364:	e7b4      	b.n	80032d0 <_malloc_r+0x4c>
 8003366:	4613      	mov	r3, r2
 8003368:	e7cc      	b.n	8003304 <_malloc_r+0x80>
 800336a:	230c      	movs	r3, #12
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4638      	mov	r0, r7
 8003370:	f000 f80e 	bl	8003390 <__malloc_unlock>
 8003374:	e797      	b.n	80032a6 <_malloc_r+0x22>
 8003376:	6025      	str	r5, [r4, #0]
 8003378:	e7dc      	b.n	8003334 <_malloc_r+0xb0>
 800337a:	605b      	str	r3, [r3, #4]
 800337c:	deff      	udf	#255	; 0xff
 800337e:	bf00      	nop
 8003380:	200003d8 	.word	0x200003d8

08003384 <__malloc_lock>:
 8003384:	4801      	ldr	r0, [pc, #4]	; (800338c <__malloc_lock+0x8>)
 8003386:	f7ff bf0f 	b.w	80031a8 <__retarget_lock_acquire_recursive>
 800338a:	bf00      	nop
 800338c:	200003d4 	.word	0x200003d4

08003390 <__malloc_unlock>:
 8003390:	4801      	ldr	r0, [pc, #4]	; (8003398 <__malloc_unlock+0x8>)
 8003392:	f7ff bf0a 	b.w	80031aa <__retarget_lock_release_recursive>
 8003396:	bf00      	nop
 8003398:	200003d4 	.word	0x200003d4

0800339c <__ssputs_r>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	461f      	mov	r7, r3
 80033a4:	42be      	cmp	r6, r7
 80033a6:	680b      	ldr	r3, [r1, #0]
 80033a8:	4682      	mov	sl, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	4690      	mov	r8, r2
 80033ae:	d82c      	bhi.n	800340a <__ssputs_r+0x6e>
 80033b0:	898a      	ldrh	r2, [r1, #12]
 80033b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b6:	d026      	beq.n	8003406 <__ssputs_r+0x6a>
 80033b8:	6965      	ldr	r5, [r4, #20]
 80033ba:	6909      	ldr	r1, [r1, #16]
 80033bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c0:	eba3 0901 	sub.w	r9, r3, r1
 80033c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c8:	1c7b      	adds	r3, r7, #1
 80033ca:	444b      	add	r3, r9
 80033cc:	106d      	asrs	r5, r5, #1
 80033ce:	429d      	cmp	r5, r3
 80033d0:	bf38      	it	cc
 80033d2:	461d      	movcc	r5, r3
 80033d4:	0553      	lsls	r3, r2, #21
 80033d6:	d527      	bpl.n	8003428 <__ssputs_r+0x8c>
 80033d8:	4629      	mov	r1, r5
 80033da:	f7ff ff53 	bl	8003284 <_malloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	b360      	cbz	r0, 800343c <__ssputs_r+0xa0>
 80033e2:	6921      	ldr	r1, [r4, #16]
 80033e4:	464a      	mov	r2, r9
 80033e6:	f000 faeb 	bl	80039c0 <memcpy>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	6126      	str	r6, [r4, #16]
 80033f8:	6165      	str	r5, [r4, #20]
 80033fa:	444e      	add	r6, r9
 80033fc:	eba5 0509 	sub.w	r5, r5, r9
 8003400:	6026      	str	r6, [r4, #0]
 8003402:	60a5      	str	r5, [r4, #8]
 8003404:	463e      	mov	r6, r7
 8003406:	42be      	cmp	r6, r7
 8003408:	d900      	bls.n	800340c <__ssputs_r+0x70>
 800340a:	463e      	mov	r6, r7
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	4632      	mov	r2, r6
 8003410:	4641      	mov	r1, r8
 8003412:	f000 faab 	bl	800396c <memmove>
 8003416:	68a3      	ldr	r3, [r4, #8]
 8003418:	1b9b      	subs	r3, r3, r6
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	4433      	add	r3, r6
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	2000      	movs	r0, #0
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	462a      	mov	r2, r5
 800342a:	f000 fad7 	bl	80039dc <_realloc_r>
 800342e:	4606      	mov	r6, r0
 8003430:	2800      	cmp	r0, #0
 8003432:	d1e0      	bne.n	80033f6 <__ssputs_r+0x5a>
 8003434:	6921      	ldr	r1, [r4, #16]
 8003436:	4650      	mov	r0, sl
 8003438:	f7ff feb8 	bl	80031ac <_free_r>
 800343c:	230c      	movs	r3, #12
 800343e:	f8ca 3000 	str.w	r3, [sl]
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295
 800344e:	e7e9      	b.n	8003424 <__ssputs_r+0x88>

08003450 <_svfiprintf_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	4698      	mov	r8, r3
 8003456:	898b      	ldrh	r3, [r1, #12]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	b09d      	sub	sp, #116	; 0x74
 800345c:	4607      	mov	r7, r0
 800345e:	460d      	mov	r5, r1
 8003460:	4614      	mov	r4, r2
 8003462:	d50e      	bpl.n	8003482 <_svfiprintf_r+0x32>
 8003464:	690b      	ldr	r3, [r1, #16]
 8003466:	b963      	cbnz	r3, 8003482 <_svfiprintf_r+0x32>
 8003468:	2140      	movs	r1, #64	; 0x40
 800346a:	f7ff ff0b 	bl	8003284 <_malloc_r>
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	6128      	str	r0, [r5, #16]
 8003472:	b920      	cbnz	r0, 800347e <_svfiprintf_r+0x2e>
 8003474:	230c      	movs	r3, #12
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	e0d0      	b.n	8003620 <_svfiprintf_r+0x1d0>
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	616b      	str	r3, [r5, #20]
 8003482:	2300      	movs	r3, #0
 8003484:	9309      	str	r3, [sp, #36]	; 0x24
 8003486:	2320      	movs	r3, #32
 8003488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800348c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003490:	2330      	movs	r3, #48	; 0x30
 8003492:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003638 <_svfiprintf_r+0x1e8>
 8003496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800349a:	f04f 0901 	mov.w	r9, #1
 800349e:	4623      	mov	r3, r4
 80034a0:	469a      	mov	sl, r3
 80034a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a6:	b10a      	cbz	r2, 80034ac <_svfiprintf_r+0x5c>
 80034a8:	2a25      	cmp	r2, #37	; 0x25
 80034aa:	d1f9      	bne.n	80034a0 <_svfiprintf_r+0x50>
 80034ac:	ebba 0b04 	subs.w	fp, sl, r4
 80034b0:	d00b      	beq.n	80034ca <_svfiprintf_r+0x7a>
 80034b2:	465b      	mov	r3, fp
 80034b4:	4622      	mov	r2, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	4638      	mov	r0, r7
 80034ba:	f7ff ff6f 	bl	800339c <__ssputs_r>
 80034be:	3001      	adds	r0, #1
 80034c0:	f000 80a9 	beq.w	8003616 <_svfiprintf_r+0x1c6>
 80034c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034c6:	445a      	add	r2, fp
 80034c8:	9209      	str	r2, [sp, #36]	; 0x24
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80a1 	beq.w	8003616 <_svfiprintf_r+0x1c6>
 80034d4:	2300      	movs	r3, #0
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034de:	f10a 0a01 	add.w	sl, sl, #1
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	9307      	str	r3, [sp, #28]
 80034e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ea:	931a      	str	r3, [sp, #104]	; 0x68
 80034ec:	4654      	mov	r4, sl
 80034ee:	2205      	movs	r2, #5
 80034f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f4:	4850      	ldr	r0, [pc, #320]	; (8003638 <_svfiprintf_r+0x1e8>)
 80034f6:	f7fc fe73 	bl	80001e0 <memchr>
 80034fa:	9a04      	ldr	r2, [sp, #16]
 80034fc:	b9d8      	cbnz	r0, 8003536 <_svfiprintf_r+0xe6>
 80034fe:	06d0      	lsls	r0, r2, #27
 8003500:	bf44      	itt	mi
 8003502:	2320      	movmi	r3, #32
 8003504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003508:	0711      	lsls	r1, r2, #28
 800350a:	bf44      	itt	mi
 800350c:	232b      	movmi	r3, #43	; 0x2b
 800350e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003512:	f89a 3000 	ldrb.w	r3, [sl]
 8003516:	2b2a      	cmp	r3, #42	; 0x2a
 8003518:	d015      	beq.n	8003546 <_svfiprintf_r+0xf6>
 800351a:	9a07      	ldr	r2, [sp, #28]
 800351c:	4654      	mov	r4, sl
 800351e:	2000      	movs	r0, #0
 8003520:	f04f 0c0a 	mov.w	ip, #10
 8003524:	4621      	mov	r1, r4
 8003526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352a:	3b30      	subs	r3, #48	; 0x30
 800352c:	2b09      	cmp	r3, #9
 800352e:	d94d      	bls.n	80035cc <_svfiprintf_r+0x17c>
 8003530:	b1b0      	cbz	r0, 8003560 <_svfiprintf_r+0x110>
 8003532:	9207      	str	r2, [sp, #28]
 8003534:	e014      	b.n	8003560 <_svfiprintf_r+0x110>
 8003536:	eba0 0308 	sub.w	r3, r0, r8
 800353a:	fa09 f303 	lsl.w	r3, r9, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	46a2      	mov	sl, r4
 8003544:	e7d2      	b.n	80034ec <_svfiprintf_r+0x9c>
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9103      	str	r1, [sp, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfbb      	ittet	lt
 8003552:	425b      	neglt	r3, r3
 8003554:	f042 0202 	orrlt.w	r2, r2, #2
 8003558:	9307      	strge	r3, [sp, #28]
 800355a:	9307      	strlt	r3, [sp, #28]
 800355c:	bfb8      	it	lt
 800355e:	9204      	strlt	r2, [sp, #16]
 8003560:	7823      	ldrb	r3, [r4, #0]
 8003562:	2b2e      	cmp	r3, #46	; 0x2e
 8003564:	d10c      	bne.n	8003580 <_svfiprintf_r+0x130>
 8003566:	7863      	ldrb	r3, [r4, #1]
 8003568:	2b2a      	cmp	r3, #42	; 0x2a
 800356a:	d134      	bne.n	80035d6 <_svfiprintf_r+0x186>
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9203      	str	r2, [sp, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bfb8      	it	lt
 8003578:	f04f 33ff 	movlt.w	r3, #4294967295
 800357c:	3402      	adds	r4, #2
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003648 <_svfiprintf_r+0x1f8>
 8003584:	7821      	ldrb	r1, [r4, #0]
 8003586:	2203      	movs	r2, #3
 8003588:	4650      	mov	r0, sl
 800358a:	f7fc fe29 	bl	80001e0 <memchr>
 800358e:	b138      	cbz	r0, 80035a0 <_svfiprintf_r+0x150>
 8003590:	9b04      	ldr	r3, [sp, #16]
 8003592:	eba0 000a 	sub.w	r0, r0, sl
 8003596:	2240      	movs	r2, #64	; 0x40
 8003598:	4082      	lsls	r2, r0
 800359a:	4313      	orrs	r3, r2
 800359c:	3401      	adds	r4, #1
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a4:	4825      	ldr	r0, [pc, #148]	; (800363c <_svfiprintf_r+0x1ec>)
 80035a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035aa:	2206      	movs	r2, #6
 80035ac:	f7fc fe18 	bl	80001e0 <memchr>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d038      	beq.n	8003626 <_svfiprintf_r+0x1d6>
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <_svfiprintf_r+0x1f0>)
 80035b6:	bb1b      	cbnz	r3, 8003600 <_svfiprintf_r+0x1b0>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	3307      	adds	r3, #7
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	3308      	adds	r3, #8
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c6:	4433      	add	r3, r6
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	e768      	b.n	800349e <_svfiprintf_r+0x4e>
 80035cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d0:	460c      	mov	r4, r1
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7a6      	b.n	8003524 <_svfiprintf_r+0xd4>
 80035d6:	2300      	movs	r3, #0
 80035d8:	3401      	adds	r4, #1
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	4619      	mov	r1, r3
 80035de:	f04f 0c0a 	mov.w	ip, #10
 80035e2:	4620      	mov	r0, r4
 80035e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e8:	3a30      	subs	r2, #48	; 0x30
 80035ea:	2a09      	cmp	r2, #9
 80035ec:	d903      	bls.n	80035f6 <_svfiprintf_r+0x1a6>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0c6      	beq.n	8003580 <_svfiprintf_r+0x130>
 80035f2:	9105      	str	r1, [sp, #20]
 80035f4:	e7c4      	b.n	8003580 <_svfiprintf_r+0x130>
 80035f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035fa:	4604      	mov	r4, r0
 80035fc:	2301      	movs	r3, #1
 80035fe:	e7f0      	b.n	80035e2 <_svfiprintf_r+0x192>
 8003600:	ab03      	add	r3, sp, #12
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	462a      	mov	r2, r5
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <_svfiprintf_r+0x1f4>)
 8003608:	a904      	add	r1, sp, #16
 800360a:	4638      	mov	r0, r7
 800360c:	f3af 8000 	nop.w
 8003610:	1c42      	adds	r2, r0, #1
 8003612:	4606      	mov	r6, r0
 8003614:	d1d6      	bne.n	80035c4 <_svfiprintf_r+0x174>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	065b      	lsls	r3, r3, #25
 800361a:	f53f af2d 	bmi.w	8003478 <_svfiprintf_r+0x28>
 800361e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003620:	b01d      	add	sp, #116	; 0x74
 8003622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003626:	ab03      	add	r3, sp, #12
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	462a      	mov	r2, r5
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <_svfiprintf_r+0x1f4>)
 800362e:	a904      	add	r1, sp, #16
 8003630:	4638      	mov	r0, r7
 8003632:	f000 f879 	bl	8003728 <_printf_i>
 8003636:	e7eb      	b.n	8003610 <_svfiprintf_r+0x1c0>
 8003638:	08003af0 	.word	0x08003af0
 800363c:	08003afa 	.word	0x08003afa
 8003640:	00000000 	.word	0x00000000
 8003644:	0800339d 	.word	0x0800339d
 8003648:	08003af6 	.word	0x08003af6

0800364c <_printf_common>:
 800364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	4616      	mov	r6, r2
 8003652:	4699      	mov	r9, r3
 8003654:	688a      	ldr	r2, [r1, #8]
 8003656:	690b      	ldr	r3, [r1, #16]
 8003658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800365c:	4293      	cmp	r3, r2
 800365e:	bfb8      	it	lt
 8003660:	4613      	movlt	r3, r2
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003668:	4607      	mov	r7, r0
 800366a:	460c      	mov	r4, r1
 800366c:	b10a      	cbz	r2, 8003672 <_printf_common+0x26>
 800366e:	3301      	adds	r3, #1
 8003670:	6033      	str	r3, [r6, #0]
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	0699      	lsls	r1, r3, #26
 8003676:	bf42      	ittt	mi
 8003678:	6833      	ldrmi	r3, [r6, #0]
 800367a:	3302      	addmi	r3, #2
 800367c:	6033      	strmi	r3, [r6, #0]
 800367e:	6825      	ldr	r5, [r4, #0]
 8003680:	f015 0506 	ands.w	r5, r5, #6
 8003684:	d106      	bne.n	8003694 <_printf_common+0x48>
 8003686:	f104 0a19 	add.w	sl, r4, #25
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	6832      	ldr	r2, [r6, #0]
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	42ab      	cmp	r3, r5
 8003692:	dc26      	bgt.n	80036e2 <_printf_common+0x96>
 8003694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003698:	1e13      	subs	r3, r2, #0
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	bf18      	it	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	0692      	lsls	r2, r2, #26
 80036a2:	d42b      	bmi.n	80036fc <_printf_common+0xb0>
 80036a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a8:	4649      	mov	r1, r9
 80036aa:	4638      	mov	r0, r7
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d01e      	beq.n	80036f0 <_printf_common+0xa4>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	6922      	ldr	r2, [r4, #16]
 80036b6:	f003 0306 	and.w	r3, r3, #6
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf02      	ittt	eq
 80036be:	68e5      	ldreq	r5, [r4, #12]
 80036c0:	6833      	ldreq	r3, [r6, #0]
 80036c2:	1aed      	subeq	r5, r5, r3
 80036c4:	68a3      	ldr	r3, [r4, #8]
 80036c6:	bf0c      	ite	eq
 80036c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036cc:	2500      	movne	r5, #0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bfc4      	itt	gt
 80036d2:	1a9b      	subgt	r3, r3, r2
 80036d4:	18ed      	addgt	r5, r5, r3
 80036d6:	2600      	movs	r6, #0
 80036d8:	341a      	adds	r4, #26
 80036da:	42b5      	cmp	r5, r6
 80036dc:	d11a      	bne.n	8003714 <_printf_common+0xc8>
 80036de:	2000      	movs	r0, #0
 80036e0:	e008      	b.n	80036f4 <_printf_common+0xa8>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4652      	mov	r2, sl
 80036e6:	4649      	mov	r1, r9
 80036e8:	4638      	mov	r0, r7
 80036ea:	47c0      	blx	r8
 80036ec:	3001      	adds	r0, #1
 80036ee:	d103      	bne.n	80036f8 <_printf_common+0xac>
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	3501      	adds	r5, #1
 80036fa:	e7c6      	b.n	800368a <_printf_common+0x3e>
 80036fc:	18e1      	adds	r1, r4, r3
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	2030      	movs	r0, #48	; 0x30
 8003702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003706:	4422      	add	r2, r4
 8003708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800370c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003710:	3302      	adds	r3, #2
 8003712:	e7c7      	b.n	80036a4 <_printf_common+0x58>
 8003714:	2301      	movs	r3, #1
 8003716:	4622      	mov	r2, r4
 8003718:	4649      	mov	r1, r9
 800371a:	4638      	mov	r0, r7
 800371c:	47c0      	blx	r8
 800371e:	3001      	adds	r0, #1
 8003720:	d0e6      	beq.n	80036f0 <_printf_common+0xa4>
 8003722:	3601      	adds	r6, #1
 8003724:	e7d9      	b.n	80036da <_printf_common+0x8e>
	...

08003728 <_printf_i>:
 8003728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	7e0f      	ldrb	r7, [r1, #24]
 800372e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003730:	2f78      	cmp	r7, #120	; 0x78
 8003732:	4691      	mov	r9, r2
 8003734:	4680      	mov	r8, r0
 8003736:	460c      	mov	r4, r1
 8003738:	469a      	mov	sl, r3
 800373a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800373e:	d807      	bhi.n	8003750 <_printf_i+0x28>
 8003740:	2f62      	cmp	r7, #98	; 0x62
 8003742:	d80a      	bhi.n	800375a <_printf_i+0x32>
 8003744:	2f00      	cmp	r7, #0
 8003746:	f000 80d4 	beq.w	80038f2 <_printf_i+0x1ca>
 800374a:	2f58      	cmp	r7, #88	; 0x58
 800374c:	f000 80c0 	beq.w	80038d0 <_printf_i+0x1a8>
 8003750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003758:	e03a      	b.n	80037d0 <_printf_i+0xa8>
 800375a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800375e:	2b15      	cmp	r3, #21
 8003760:	d8f6      	bhi.n	8003750 <_printf_i+0x28>
 8003762:	a101      	add	r1, pc, #4	; (adr r1, 8003768 <_printf_i+0x40>)
 8003764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037d5 	.word	0x080037d5
 8003770:	08003751 	.word	0x08003751
 8003774:	08003751 	.word	0x08003751
 8003778:	08003751 	.word	0x08003751
 800377c:	08003751 	.word	0x08003751
 8003780:	080037d5 	.word	0x080037d5
 8003784:	08003751 	.word	0x08003751
 8003788:	08003751 	.word	0x08003751
 800378c:	08003751 	.word	0x08003751
 8003790:	08003751 	.word	0x08003751
 8003794:	080038d9 	.word	0x080038d9
 8003798:	08003801 	.word	0x08003801
 800379c:	08003893 	.word	0x08003893
 80037a0:	08003751 	.word	0x08003751
 80037a4:	08003751 	.word	0x08003751
 80037a8:	080038fb 	.word	0x080038fb
 80037ac:	08003751 	.word	0x08003751
 80037b0:	08003801 	.word	0x08003801
 80037b4:	08003751 	.word	0x08003751
 80037b8:	08003751 	.word	0x08003751
 80037bc:	0800389b 	.word	0x0800389b
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	602a      	str	r2, [r5, #0]
 80037c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d0:	2301      	movs	r3, #1
 80037d2:	e09f      	b.n	8003914 <_printf_i+0x1ec>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	0607      	lsls	r7, r0, #24
 80037da:	f103 0104 	add.w	r1, r3, #4
 80037de:	6029      	str	r1, [r5, #0]
 80037e0:	d501      	bpl.n	80037e6 <_printf_i+0xbe>
 80037e2:	681e      	ldr	r6, [r3, #0]
 80037e4:	e003      	b.n	80037ee <_printf_i+0xc6>
 80037e6:	0646      	lsls	r6, r0, #25
 80037e8:	d5fb      	bpl.n	80037e2 <_printf_i+0xba>
 80037ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	da03      	bge.n	80037fa <_printf_i+0xd2>
 80037f2:	232d      	movs	r3, #45	; 0x2d
 80037f4:	4276      	negs	r6, r6
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fa:	485a      	ldr	r0, [pc, #360]	; (8003964 <_printf_i+0x23c>)
 80037fc:	230a      	movs	r3, #10
 80037fe:	e012      	b.n	8003826 <_printf_i+0xfe>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	1d19      	adds	r1, r3, #4
 8003806:	6029      	str	r1, [r5, #0]
 8003808:	0605      	lsls	r5, r0, #24
 800380a:	d501      	bpl.n	8003810 <_printf_i+0xe8>
 800380c:	681e      	ldr	r6, [r3, #0]
 800380e:	e002      	b.n	8003816 <_printf_i+0xee>
 8003810:	0641      	lsls	r1, r0, #25
 8003812:	d5fb      	bpl.n	800380c <_printf_i+0xe4>
 8003814:	881e      	ldrh	r6, [r3, #0]
 8003816:	4853      	ldr	r0, [pc, #332]	; (8003964 <_printf_i+0x23c>)
 8003818:	2f6f      	cmp	r7, #111	; 0x6f
 800381a:	bf0c      	ite	eq
 800381c:	2308      	moveq	r3, #8
 800381e:	230a      	movne	r3, #10
 8003820:	2100      	movs	r1, #0
 8003822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003826:	6865      	ldr	r5, [r4, #4]
 8003828:	60a5      	str	r5, [r4, #8]
 800382a:	2d00      	cmp	r5, #0
 800382c:	bfa2      	ittt	ge
 800382e:	6821      	ldrge	r1, [r4, #0]
 8003830:	f021 0104 	bicge.w	r1, r1, #4
 8003834:	6021      	strge	r1, [r4, #0]
 8003836:	b90e      	cbnz	r6, 800383c <_printf_i+0x114>
 8003838:	2d00      	cmp	r5, #0
 800383a:	d04b      	beq.n	80038d4 <_printf_i+0x1ac>
 800383c:	4615      	mov	r5, r2
 800383e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003842:	fb03 6711 	mls	r7, r3, r1, r6
 8003846:	5dc7      	ldrb	r7, [r0, r7]
 8003848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800384c:	4637      	mov	r7, r6
 800384e:	42bb      	cmp	r3, r7
 8003850:	460e      	mov	r6, r1
 8003852:	d9f4      	bls.n	800383e <_printf_i+0x116>
 8003854:	2b08      	cmp	r3, #8
 8003856:	d10b      	bne.n	8003870 <_printf_i+0x148>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	07de      	lsls	r6, r3, #31
 800385c:	d508      	bpl.n	8003870 <_printf_i+0x148>
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	6861      	ldr	r1, [r4, #4]
 8003862:	4299      	cmp	r1, r3
 8003864:	bfde      	ittt	le
 8003866:	2330      	movle	r3, #48	; 0x30
 8003868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800386c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003870:	1b52      	subs	r2, r2, r5
 8003872:	6122      	str	r2, [r4, #16]
 8003874:	f8cd a000 	str.w	sl, [sp]
 8003878:	464b      	mov	r3, r9
 800387a:	aa03      	add	r2, sp, #12
 800387c:	4621      	mov	r1, r4
 800387e:	4640      	mov	r0, r8
 8003880:	f7ff fee4 	bl	800364c <_printf_common>
 8003884:	3001      	adds	r0, #1
 8003886:	d14a      	bne.n	800391e <_printf_i+0x1f6>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	b004      	add	sp, #16
 800388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	4833      	ldr	r0, [pc, #204]	; (8003968 <_printf_i+0x240>)
 800389c:	2778      	movs	r7, #120	; 0x78
 800389e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	6829      	ldr	r1, [r5, #0]
 80038a6:	061f      	lsls	r7, r3, #24
 80038a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ac:	d402      	bmi.n	80038b4 <_printf_i+0x18c>
 80038ae:	065f      	lsls	r7, r3, #25
 80038b0:	bf48      	it	mi
 80038b2:	b2b6      	uxthmi	r6, r6
 80038b4:	07df      	lsls	r7, r3, #31
 80038b6:	bf48      	it	mi
 80038b8:	f043 0320 	orrmi.w	r3, r3, #32
 80038bc:	6029      	str	r1, [r5, #0]
 80038be:	bf48      	it	mi
 80038c0:	6023      	strmi	r3, [r4, #0]
 80038c2:	b91e      	cbnz	r6, 80038cc <_printf_i+0x1a4>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2310      	movs	r3, #16
 80038ce:	e7a7      	b.n	8003820 <_printf_i+0xf8>
 80038d0:	4824      	ldr	r0, [pc, #144]	; (8003964 <_printf_i+0x23c>)
 80038d2:	e7e4      	b.n	800389e <_printf_i+0x176>
 80038d4:	4615      	mov	r5, r2
 80038d6:	e7bd      	b.n	8003854 <_printf_i+0x12c>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	6826      	ldr	r6, [r4, #0]
 80038dc:	6961      	ldr	r1, [r4, #20]
 80038de:	1d18      	adds	r0, r3, #4
 80038e0:	6028      	str	r0, [r5, #0]
 80038e2:	0635      	lsls	r5, r6, #24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	d501      	bpl.n	80038ec <_printf_i+0x1c4>
 80038e8:	6019      	str	r1, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <_printf_i+0x1ca>
 80038ec:	0670      	lsls	r0, r6, #25
 80038ee:	d5fb      	bpl.n	80038e8 <_printf_i+0x1c0>
 80038f0:	8019      	strh	r1, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6123      	str	r3, [r4, #16]
 80038f6:	4615      	mov	r5, r2
 80038f8:	e7bc      	b.n	8003874 <_printf_i+0x14c>
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	1d1a      	adds	r2, r3, #4
 80038fe:	602a      	str	r2, [r5, #0]
 8003900:	681d      	ldr	r5, [r3, #0]
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	2100      	movs	r1, #0
 8003906:	4628      	mov	r0, r5
 8003908:	f7fc fc6a 	bl	80001e0 <memchr>
 800390c:	b108      	cbz	r0, 8003912 <_printf_i+0x1ea>
 800390e:	1b40      	subs	r0, r0, r5
 8003910:	6060      	str	r0, [r4, #4]
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	6123      	str	r3, [r4, #16]
 8003916:	2300      	movs	r3, #0
 8003918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391c:	e7aa      	b.n	8003874 <_printf_i+0x14c>
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	462a      	mov	r2, r5
 8003922:	4649      	mov	r1, r9
 8003924:	4640      	mov	r0, r8
 8003926:	47d0      	blx	sl
 8003928:	3001      	adds	r0, #1
 800392a:	d0ad      	beq.n	8003888 <_printf_i+0x160>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	079b      	lsls	r3, r3, #30
 8003930:	d413      	bmi.n	800395a <_printf_i+0x232>
 8003932:	68e0      	ldr	r0, [r4, #12]
 8003934:	9b03      	ldr	r3, [sp, #12]
 8003936:	4298      	cmp	r0, r3
 8003938:	bfb8      	it	lt
 800393a:	4618      	movlt	r0, r3
 800393c:	e7a6      	b.n	800388c <_printf_i+0x164>
 800393e:	2301      	movs	r3, #1
 8003940:	4632      	mov	r2, r6
 8003942:	4649      	mov	r1, r9
 8003944:	4640      	mov	r0, r8
 8003946:	47d0      	blx	sl
 8003948:	3001      	adds	r0, #1
 800394a:	d09d      	beq.n	8003888 <_printf_i+0x160>
 800394c:	3501      	adds	r5, #1
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	9903      	ldr	r1, [sp, #12]
 8003952:	1a5b      	subs	r3, r3, r1
 8003954:	42ab      	cmp	r3, r5
 8003956:	dcf2      	bgt.n	800393e <_printf_i+0x216>
 8003958:	e7eb      	b.n	8003932 <_printf_i+0x20a>
 800395a:	2500      	movs	r5, #0
 800395c:	f104 0619 	add.w	r6, r4, #25
 8003960:	e7f5      	b.n	800394e <_printf_i+0x226>
 8003962:	bf00      	nop
 8003964:	08003b01 	.word	0x08003b01
 8003968:	08003b12 	.word	0x08003b12

0800396c <memmove>:
 800396c:	4288      	cmp	r0, r1
 800396e:	b510      	push	{r4, lr}
 8003970:	eb01 0402 	add.w	r4, r1, r2
 8003974:	d902      	bls.n	800397c <memmove+0x10>
 8003976:	4284      	cmp	r4, r0
 8003978:	4623      	mov	r3, r4
 800397a:	d807      	bhi.n	800398c <memmove+0x20>
 800397c:	1e43      	subs	r3, r0, #1
 800397e:	42a1      	cmp	r1, r4
 8003980:	d008      	beq.n	8003994 <memmove+0x28>
 8003982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800398a:	e7f8      	b.n	800397e <memmove+0x12>
 800398c:	4402      	add	r2, r0
 800398e:	4601      	mov	r1, r0
 8003990:	428a      	cmp	r2, r1
 8003992:	d100      	bne.n	8003996 <memmove+0x2a>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800399a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800399e:	e7f7      	b.n	8003990 <memmove+0x24>

080039a0 <_sbrk_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4d06      	ldr	r5, [pc, #24]	; (80039bc <_sbrk_r+0x1c>)
 80039a4:	2300      	movs	r3, #0
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fd ff66 	bl	800187c <_sbrk>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_sbrk_r+0x1a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_sbrk_r+0x1a>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	200003d0 	.word	0x200003d0

080039c0 <memcpy>:
 80039c0:	440a      	add	r2, r1
 80039c2:	4291      	cmp	r1, r2
 80039c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039c8:	d100      	bne.n	80039cc <memcpy+0xc>
 80039ca:	4770      	bx	lr
 80039cc:	b510      	push	{r4, lr}
 80039ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d6:	4291      	cmp	r1, r2
 80039d8:	d1f9      	bne.n	80039ce <memcpy+0xe>
 80039da:	bd10      	pop	{r4, pc}

080039dc <_realloc_r>:
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e0:	4680      	mov	r8, r0
 80039e2:	4614      	mov	r4, r2
 80039e4:	460e      	mov	r6, r1
 80039e6:	b921      	cbnz	r1, 80039f2 <_realloc_r+0x16>
 80039e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ec:	4611      	mov	r1, r2
 80039ee:	f7ff bc49 	b.w	8003284 <_malloc_r>
 80039f2:	b92a      	cbnz	r2, 8003a00 <_realloc_r+0x24>
 80039f4:	f7ff fbda 	bl	80031ac <_free_r>
 80039f8:	4625      	mov	r5, r4
 80039fa:	4628      	mov	r0, r5
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	f000 f81b 	bl	8003a3a <_malloc_usable_size_r>
 8003a04:	4284      	cmp	r4, r0
 8003a06:	4607      	mov	r7, r0
 8003a08:	d802      	bhi.n	8003a10 <_realloc_r+0x34>
 8003a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a0e:	d812      	bhi.n	8003a36 <_realloc_r+0x5a>
 8003a10:	4621      	mov	r1, r4
 8003a12:	4640      	mov	r0, r8
 8003a14:	f7ff fc36 	bl	8003284 <_malloc_r>
 8003a18:	4605      	mov	r5, r0
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0ed      	beq.n	80039fa <_realloc_r+0x1e>
 8003a1e:	42bc      	cmp	r4, r7
 8003a20:	4622      	mov	r2, r4
 8003a22:	4631      	mov	r1, r6
 8003a24:	bf28      	it	cs
 8003a26:	463a      	movcs	r2, r7
 8003a28:	f7ff ffca 	bl	80039c0 <memcpy>
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	4640      	mov	r0, r8
 8003a30:	f7ff fbbc 	bl	80031ac <_free_r>
 8003a34:	e7e1      	b.n	80039fa <_realloc_r+0x1e>
 8003a36:	4635      	mov	r5, r6
 8003a38:	e7df      	b.n	80039fa <_realloc_r+0x1e>

08003a3a <_malloc_usable_size_r>:
 8003a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3e:	1f18      	subs	r0, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bfbc      	itt	lt
 8003a44:	580b      	ldrlt	r3, [r1, r0]
 8003a46:	18c0      	addlt	r0, r0, r3
 8003a48:	4770      	bx	lr
	...

08003a4c <_init>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr

08003a58 <_fini>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr
